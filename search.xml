<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MiniSpring</title>
      <link href="/2023/03/06/%E6%89%8B%E5%86%99spring/"/>
      <url>/2023/03/06/%E6%89%8B%E5%86%99spring/</url>
      
        <content type="html"><![CDATA[<hr><hr><h2 id="手写源码实现spring"><a href="#手写源码实现spring" class="headerlink" title="手写源码实现spring"></a>手写源码实现spring</h2><h3 id="基本的创建"><a href="#基本的创建" class="headerlink" title="基本的创建"></a>基本的创建</h3><p>首先看看spring源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个spring容器</span></span><br><span class="line">AnnotationConfigApplicationContext = applicationContext = <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class)</span><br><span class="line"><span class="comment">//获取到bean</span></span><br><span class="line"><span class="type">AService</span> <span class="variable">aService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;aService&quot;</span>,Aservice.class)</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">aService.test();</span><br></pre></td></tr></table></figure><p>所有我们可以先创建一个StudyApplicationContext类，根据源码起码类中有一个getBean方法，一个带参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudyApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可得，我们在Main中实现spring源码中的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//用spring测试</span></span><br><span class="line"></span><br><span class="line">    <span class="type">StudyApplicationContext</span> <span class="variable">studyApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudyApplicationContext</span>(AppConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)studyApplicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有我们还需创建一个UserService类，实现test方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观看UserService类，我们发现还少一个@Component注解,创建一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；</span></span><br><span class="line"><span class="comment">2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；</span></span><br><span class="line"><span class="comment">3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</span></span><br><span class="line"><span class="comment">1.CONSTRUCTOR:用于描述构造器</span></span><br><span class="line"><span class="comment">2.FIELD:用于描述域</span></span><br><span class="line"><span class="comment">3.LOCAL_VARIABLE:用于描述局部变量</span></span><br><span class="line"><span class="comment">4.METHOD:用于描述方法</span></span><br><span class="line"><span class="comment">5.PACKAGE:用于描述包</span></span><br><span class="line"><span class="comment">6.PARAMETER:用于描述参数</span></span><br><span class="line"><span class="comment">7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="comment">//@component是spring中的一个注解，它的作用就是实现bean的注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"><span class="comment">//默认的值为&quot;&quot;,在其他地方使用该注解值可命名</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及一个AppConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.study.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时又需@ComponentScan注解,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="comment">//@ComponentScan 的作用就是根据定义的扫描路径，把符合扫描规则的类装配到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现StudyApplicationContext中的构造方法"><a href="#实现StudyApplicationContext中的构造方法" class="headerlink" title="实现StudyApplicationContext中的构造方法"></a>实现StudyApplicationContext中的构造方法</h3><h4 id="拿到-componentScan中的包名"><a href="#拿到-componentScan中的包名" class="headerlink" title="拿到@componentScan中的包名"></a>拿到@componentScan中的包名</h4><p>回到StudyApplicationContext，我们来看构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StudyApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.configClass = configClass;</span><br><span class="line"><span class="comment">//解析构造类</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.拿到当前类上的注解ComponentScan</span></span><br><span class="line">    <span class="type">ComponentScan</span> <span class="variable">annotation</span> <span class="operator">=</span>(ComponentScan)configClass.getAnnotation(ComponentScan.class);</span><br><span class="line">    <span class="comment">//2.拿到当前的注解的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">    <span class="comment">//打印路径测试</span></span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试图 </p><p><img src="/../assets/MiniSpringImg/1.JPG"> </p><h4 id="将包名转为绝对路径并查找-Component注解的类"><a href="#将包名转为绝对路径并查找-Component注解的类" class="headerlink" title="将包名转为绝对路径并查找@Component注解的类"></a>将包名转为绝对路径并查找@Component注解的类</h4><p>拿到com.study.test后</p><p>​整体逻辑：拿到路径后进行扫描–&gt;找出路径下的带有@Component注解的类—-&gt;生成bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将路径变为com/study/test</span></span><br><span class="line">path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">//获取系统盘下的target路径</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> StudyApplicationContext.class.getClassLoader();  <span class="comment">//appClassLoader</span></span><br><span class="line"><span class="comment">//获得绝对路径</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br></pre></td></tr></table></figure><p><img src="/../assets/MiniSpringImg/2.JPG"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到文件夹下的3个类文件</span></span><br><span class="line">File[] files = file.listFiles();</span><br><span class="line"><span class="comment">//循环判断类文件下的类是否存在@Component注解</span></span><br><span class="line"><span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">    <span class="comment">//将file对象转成class对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> f.getAbsolutePath();</span><br><span class="line">    <span class="keyword">if</span> (fileName.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileName.substring(fileName.indexOf(<span class="string">&quot;com&quot;</span>), fileName.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">        <span class="comment">//拿到com.study.test.UserService</span></span><br><span class="line">        className = className.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将类路径转成类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> classLoader.loadClass(className);</span><br><span class="line">            <span class="comment">//判断是否存在@Component注解</span></span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(Component.class))&#123;</span><br><span class="line">                System.out.println(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/MiniSpringImg/3.JPG"> </p><h4 id="找到类后实现spring的依赖注入"><a href="#找到类后实现spring的依赖注入" class="headerlink" title="找到类后实现spring的依赖注入"></a>找到类后实现spring的依赖注入</h4><p>扫描到含有@Component注解后,有几种分支</p><ol><li><p>单例bean</p></li><li><p>含有@Scope(“prototype”)注解：多例bean</p></li></ol><p>因为需要判断getBean时是单例还是多例bean，我们需要创建一个BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="comment">//类型</span></span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">    <span class="comment">//作用域</span></span><br><span class="line">    <span class="keyword">private</span> String scope;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getScope</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScope</span><span class="params">(String scope)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scope = scope;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ApplicationContext定义一个Map&lt;String,BeanDefinition&gt;来查找spring中有哪些bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring容器中有哪些bean</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>在上述逻辑中，扫描含有@Component注解下的类中@Scope中的信息，并封装成beanDefinitionMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取bean的名字</span></span><br><span class="line"><span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> (Component)clazz.getAnnotation(Component.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> component.value();</span><br><span class="line"><span class="comment">//生成bean定义对象</span></span><br><span class="line"><span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>();</span><br><span class="line"><span class="comment">//将bean的类封装到beanDefinition</span></span><br><span class="line">beanDefinition.setClazz(clazz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(clazz.isAnnotationPresent(Scope.class))&#123;</span><br><span class="line">    <span class="comment">//将用户写的scope的注解封装到beanDefinition</span></span><br><span class="line">    <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> (Scope)clazz.getAnnotation(Scope.class);</span><br><span class="line">    beanDefinition.setScope(scope.value());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//没有注解</span></span><br><span class="line">    beanDefinition.setScope(<span class="string">&quot;singleton&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将beanName和beanDefinition保存在beanDefinitionMap中</span></span><br><span class="line">beanDefinitionMap.put(beanName,beanDefinition);</span><br></pre></td></tr></table></figure><p>最后将所有扫描逻辑封装成scan方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描路径并将信息封装成beanDefinitionMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scan</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="comment">//1.拿到当前类上的注解ComponentScan</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">annotation</span> <span class="operator">=</span>(ComponentScan)configClass.getAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2.拿到当前的注解的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> annotation.value();</span><br><span class="line"><span class="comment">//        System.out.println(path);</span></span><br><span class="line">        <span class="comment">//3.拿到路径后进行扫描--&gt;找出路径下的带有@Component注解的类----&gt;生成bean对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径变为com/study/test</span></span><br><span class="line">        path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//获取系统盘下的target路径</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> StudyApplicationContext.class.getClassLoader();  <span class="comment">//appClassLoader</span></span><br><span class="line">        <span class="comment">//获得绝对路径</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br><span class="line">        <span class="comment">//拿到File对象,文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(resource.getFile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到文件夹下的3个类文件</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">//循环判断类文件下的类是否存在@Component注解</span></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//将file对象转成class对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> f.getAbsolutePath();</span><br><span class="line">            <span class="keyword">if</span> (fileName.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileName.substring(fileName.indexOf(<span class="string">&quot;com&quot;</span>), fileName.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">                <span class="comment">//拿到com.study.test.UserService</span></span><br><span class="line">                className = className.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//将类路径转成类</span></span><br><span class="line">                    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> classLoader.loadClass(className);</span><br><span class="line">                    <span class="comment">//判断是否存在@Component注解</span></span><br><span class="line">                    <span class="keyword">if</span> (clazz.isAnnotationPresent(Component.class))&#123;</span><br><span class="line">                        <span class="comment">//获取bean的名字</span></span><br><span class="line">                        <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> (Component)clazz.getAnnotation(Component.class);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> component.value();</span><br><span class="line">                        <span class="comment">//生成bean定义对象</span></span><br><span class="line">                        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>();</span><br><span class="line">                        <span class="comment">//将bean的类封装到beanDefinition</span></span><br><span class="line">                        beanDefinition.setClazz(clazz);</span><br><span class="line">                        <span class="keyword">if</span>(clazz.isAnnotationPresent(Scope.class))&#123;</span><br><span class="line">                            <span class="comment">//将用户写的scope的注解封装到beanDefinition</span></span><br><span class="line">                            <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> (Scope)clazz.getAnnotation(Scope.class);</span><br><span class="line">                            beanDefinition.setScope(scope.value());</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//没有注解</span></span><br><span class="line">                            beanDefinition.setScope(<span class="string">&quot;singleton&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将beanName和beanDefinition保存在beanDefinitionMap中</span></span><br><span class="line">                        beanDefinitionMap.put(beanName,beanDefinition);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql语句练习题</title>
      <link href="/2023/03/04/sql%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/03/04/sql%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>有一张年纪的学生期末考试成绩表(scoreresult)，字段有：学号（sid）、姓名（name）、科目（subject），分数（score）；</p><p>还有一张年纪的学生分班表（classes），字段有：班级（classid）、学号（sid）、姓名（name）。</p><ol><li>用一个查询语句，查询出该年纪所有学生的期末考试总成绩，并按总分排名。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sid,sum(score) from scoreresult group by sid Order by sum(score) Desc</span><br></pre></td></tr></table></figure><ol start="2"><li>用一个查询语句，查询出1班学生的总成绩平均分</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//先求出1班的学生</span><br><span class="line">select classid,sid,score from classes a,scoreresult b where classid = 1 And a.sid = b.sid   classOne</span><br><span class="line">//求出1班学生的总成绩</span><br><span class="line">select sid,sum(score) as sumScore from classOne    classOneSumScore</span><br><span class="line">//求出1班学生的总成绩的平均分</span><br><span class="line">select avg(sumScore) form classOneSumScore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select avg(sumScore) form </span><br><span class="line">(select sid,sum(srcore) as sumScore from classOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//将3条sql语句合成一句</span><br><span class="line">select avg(sumScore) from (</span><br><span class="line">select c.sid,sum(b_score) as sumScore from (</span><br><span class="line">select a.classid,b.sid,b.score b_score from classes a,scoreresult b </span><br><span class="line">where a.classid = 1 And a.sid = b.sid) as c) as d</span><br></pre></td></tr></table></figure><ol start="3"><li>查询年纪各科目的第一名人员和分数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//求出各个科目的单科最高分数</span><br><span class="line">select subject,max(score) as maxScore from scoreresult group by subject     a</span><br><span class="line">//求出各科目第一名的人员和分数</span><br><span class="line">select a.subject,b.name,a.maxScore from a,scoreresult as b </span><br><span class="line">where a.subject = b.subject And a.maxScore = b.score</span><br><span class="line"></span><br><span class="line">//将2条sql语句合成一条</span><br><span class="line">select a.subject,b.name,a.maxScore from (</span><br><span class="line">select subject,max(score) as maxScore from scoreresult group by subject) </span><br><span class="line">as a,scoreresult as b </span><br><span class="line">where a.subject = b.subject And a.maxScore = b.score</span><br></pre></td></tr></table></figure><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>有一个员工employees表简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Parto</td><td>Bamford</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr></tbody></table><p>请你查找employees里入职员工时间排名倒数第三的员工所有信息，以上例子输出如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr></tbody></table><p>注意：可能会存在同一个日期入职的员工，所以入职员工时间排名倒数第三的员工可能不止一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//求出入职时间排名倒数第三的时间</span><br><span class="line">select hire_date from employees group by hire_date Order by hire_date desc limit 2,1</span><br><span class="line">//求出入职员工时间排名倒数第三的员工所有信息</span><br><span class="line">select a.* from employees a where a.hire_date in</span><br><span class="line">(select b.hire_date from </span><br><span class="line">(select hire_date from employees group by hire_date Order by hire_date desc limit 2,1) b)</span><br></pre></td></tr></table></figure><p>常见错误（不支持子查询中含有limit）</p><p>“This version of MySQL doesn’t yet support ‘LIMIT &amp; IN&#x2F;ALL&#x2F;ANY&#x2F;SOME subquery’” 的意思是，这版本的 MySQL 不支持使用 LIMIT 子句的 IN&#x2F;ALL&#x2F;ANY&#x2F;SOME 子查询，即是支持非 IN&#x2F;ALL&#x2F;ANY&#x2F;SOME 子查询的 LIMIT 子查询。</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select b.hire_date from </span><br><span class="line">(select hire_date from employees group by hire_date Order by hire_date desc limit 2,1) as b</span><br></pre></td></tr></table></figure><h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA面试题</title>
      <link href="/2023/02/25/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/02/25/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>什么是面向对象？</strong></p><p>面向过程（C语言）更注重每一个步骤和顺序，面向对象更注重事情有哪些参与者（对象），以及各自需要做什么</p><p><strong>三大特性</strong></p><p><strong>封装</strong>：允许调用那些明确标识（public）的内部成员函数和数据项</p><p>不需要关心内部细节，只需要调用它的方法（例：sql连接数据库）</p><p><strong>继承</strong>：子类继承父类的属性和方法，不需要自己定义（增加代码复用率）</p><p><strong>多态</strong>：基于对象所属的类的不同，外部对于同一个方法的调用，实现的逻辑不同(利于维护和扩展)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类对象<span class="number">1</span>;</span><br><span class="line"><span class="comment">//父类类型 变量名 = new 子类对象2;</span></span><br><span class="line">变量名.方法名(); <span class="comment">//调用相同的方法时，1对象和2对象实现的方法不同</span></span><br></pre></td></tr></table></figure><h2 id="JDK、JRE、JVM直接的区别"><a href="#JDK、JRE、JVM直接的区别" class="headerlink" title="JDK、JRE、JVM直接的区别"></a>JDK、JRE、JVM直接的区别</h2><p>JDK：Java标准开发包，他提供了<strong>编译、运行</strong>Java程序所需的各种工具和资源，JDK包括了JRE，包括<strong>Java编译器、Java运行时的环境，以及常用的Java类库</strong></p><p>JRE: Java运行环境，用于<strong>运行java字节码</strong>的文件，JRE包括了JVM和JVM工作所需要的类库，普通用户只需要安装JRE就可以运行java程序，但开发者需要安装JDK来编译、运行java程序</p><p>JVM: java虚拟机，是JRE的一部分，它是整个java实现跨平台的核心，负责运行字节码文件</p><h2 id="hashCode-和equals-之间的关系"><a href="#hashCode-和equals-之间的关系" class="headerlink" title="hashCode()和equals()之间的关系"></a>hashCode()和equals()之间的关系</h2><p>可以拿来判断对象是否相等的</p><p>equal()相等的两个对象他们的hashCode()肯定相等，也就是用equal()对比是绝对可靠的。<br>hashCode()相等的两个对象他们的equal()不一定相等，也就是hashCode()不是绝对可靠的。(哈希碰撞)</p><p>在Java的一些集合类的实现中（hashMap），在比较两个对象是否相等时，会先调用hashcode进行比较，再调用equals进行比较</p><h2 id="权限修饰符之间的区别"><a href="#权限修饰符之间的区别" class="headerlink" title="权限修饰符之间的区别"></a>权限修饰符之间的区别</h2><ol><li><strong>public</strong>：表示紧跟其后的成员可以被任何人引用</li><li><strong>private</strong>：表示紧跟其后的成员除了类型创建者和类型内部的方法，任何人都不可引用，否者程序编译报错</li><li><strong>protected</strong>：protected关键字与private效果相当，差别仅在于继承的类可以访问protected成员</li><li><strong>默认访问权限（即定义属性时不加任何关键字修饰）</strong>：默认访问权限通常被称为“包访问权限”，在这种权限下的成员变量可被同一个包中的其他类访问</li></ol><h2 id="String、StringBuffer、StringBuilder的区别"><a href="#String、StringBuffer、StringBuilder的区别" class="headerlink" title="String、StringBuffer、StringBuilder的区别"></a>String、StringBuffer、StringBuilder的区别</h2><ol><li><p>String是<strong>final修饰的</strong>，不可变的，修改后会产生一个新的字符串对象，StringBuffer和StringBuilder是可变的</p></li><li><p>StringBuffer是线程安全的，StringBuilder是线程不安全的，单线程用StringBuilder效率会更高</p></li></ol><h2 id="泛型中extends和super的区别"><a href="#泛型中extends和super的区别" class="headerlink" title="泛型中extends和super的区别"></a>泛型中extends和super的区别</h2><ol><li><? extends T>表示包括T在内的任何T的子类</li><li><? super T>表示包括T在内的任何T的父类</li></ol><p>泛型只是编译层面的限制，运行后的类其实是不变的</p><h2 id="x3D-x3D-和equals方法的区别"><a href="#x3D-x3D-和equals方法的区别" class="headerlink" title="&#x3D;&#x3D;和equals方法的区别"></a>&#x3D;&#x3D;和equals方法的区别</h2><ol><li>&#x3D;&#x3D;: 如果是基本数据类型，比较值，如果是引用类型(String)，比较的是引用地址</li><li>equals: 具体看重写后的逻辑，比如String类，重写后比较字符串的各个字符是否相等</li></ol><h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><p>重载：发生在同一个类中，方法名必须相同，参数类型不同，个数不同，顺序不同。方法返回值和访问修饰符不同时会直接编译报错</p><p>重写：发生在父子类中，方法名、参数列表必须相同，返回值范围要小于等于父类，抛出的异常要小于等于父类，访问修饰符要大于等于父类；如果父类时private，则子类不能重写该方法。</p><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><ul><li>抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。</li><li>抽象类只能继承一个，接口可以实现多个。</li></ul><p>​接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无， 但不对如何实现行为进行限制。 而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行 为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实 现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己 实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执 行）。</p><pre><code> 抽象类是对类本质的抽象，表达的是 is a 的关系，比如： BMW is a Car 。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。 而接口是对行为的抽象，表达的是 like a 的关系。比如： Bird like a Aircraft （像飞行器一样可以 飞），但其本质上 is a Bird 。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、 是如何实现的，接口并不关心。 使用场景：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。 抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度</code></pre><h2 id="finnal"><a href="#finnal" class="headerlink" title="finnal"></a>finnal</h2><p>最终的</p><ul><li>修饰类：表示类不可被继承</li><li>修饰方法：表示不可被子类覆盖，但是可以重载</li><li>修饰变量：表示变量一旦被赋值就不可以更改它的值</li></ul><p>（1）修饰成员变量</p><ul><li>如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</li><li>如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。</li></ul><p>（2）修饰局部变量</p><ul><li>系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使用final修饰局部变量时， 即可以在定义时指定默认值（后面的代码不能对变量再赋值），也可以不指定默认值，而在后面的代码 中对final变量赋初值（仅一次）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalVar</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//再声明的时候就需要赋值 或者静态代码块赋值</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    static&#123;</span></span><br><span class="line"><span class="comment">    a = 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//再声明的时候就需要赋值 或者代码块中赋值 或者构造器赋值</span></span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">b = 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> localA; <span class="comment">//局部变量只声明没有初始化，不会报错,与final无关。</span></span><br><span class="line">        localA = <span class="number">0</span>;<span class="comment">//在使用之前一定要赋值</span></span><br><span class="line">        <span class="comment">//localA = 1; 但是不允许第二次赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）修饰基本类型数据和引用类型数据</p><ul><li>如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；</li><li>如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。但是<strong>引用的值是可变</strong>的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalReferenceTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] iArr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        iArr[<span class="number">2</span>]=-<span class="number">3</span>;<span class="comment">//合法</span></span><br><span class="line">        iArr=<span class="literal">null</span>;<span class="comment">//非法，对iArr不能重新赋值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">25</span>);</span><br><span class="line">        p.setAge(<span class="number">24</span>);<span class="comment">//合法</span></span><br><span class="line">        p=<span class="literal">null</span>;<span class="comment">//非法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>分为Collection和Map，collection分为Set、List、Queue，Map分为TreeMap、HashMap，LinkedHashMap，HashTable</p><h2 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h2><p>List：有序，可重复，允许多个null元素对象，取元素时可以用迭代器（iterator）取出元素遍历，也可以用指定的下标来遍历</p><p>Set：无序，不可重复，只允许一个null元素对象，取元素时只能用迭代器（iterator）取出元素遍历</p><h2 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h2><ol><li>底层的数据结构不同，ArraryList是用数组实现的，LinkedList是用链表实现的</li><li>由于底层的数据结构不同，ArraryList适用于下标查找，LinkedList适用于删除，添加</li><li>两个都实现了List的接口，LinkedList额外实现了Deque接口，可以当作队列实现</li></ol><h2 id="HashMap和HashTable有什么区别？其底层实现是什么？"><a href="#HashMap和HashTable有什么区别？其底层实现是什么？" class="headerlink" title="HashMap和HashTable有什么区别？其底层实现是什么？"></a>HashMap和HashTable有什么区别？其底层实现是什么？</h2><p>底层:</p><ol><li>HashMap方法没有synchronized修饰，线程非安全，HashTable线程安全；</li><li>HashMap允许key和value为null，而HashTable不允许</li></ol><p>底层实现：数组+链表实现</p><h2 id="JDK1-7-到-JDK1-8-HashMap-发生了什么变化（底层）？"><a href="#JDK1-7-到-JDK1-8-HashMap-发生了什么变化（底层）？" class="headerlink" title="JDK1.7 到 JDK1.8 HashMap 发生了什么变化（底层）？"></a>JDK1.7 到 JDK1.8 HashMap 发生了什么变化（底层）？</h2><ol><li>1.7中的底层数组+链表，1.8中的底层是数组+链表+红黑树，加红黑树的目的是提高HashMap插入和查询整体效率</li><li>1.7中的链表插入使用的是头插法，1.8中链表插入使用的是尾插法（因为1.8中插入key和value时需要判断链表元素个数，所以正好使用尾插法）</li><li>1.7中哈希算法比较复杂，存在各种右移与异或运算，1.8新增了红黑树，所以可以适当的简化哈希算法，节省CPU</li></ol><h2 id="HashMap（扩容机制）的put方法"><a href="#HashMap（扩容机制）的put方法" class="headerlink" title="HashMap（扩容机制）的put方法"></a>HashMap（扩容机制）的put方法</h2><ol><li>根据Key通过哈希算法与与运算得出数组下标</li><li>如果数组下标位置为空，则将key和value封装到Entry对象（1.7版本）或Node对象（1.8版本）</li><li>如果数组下标位置元素不为空，则分情况讨论<ul><li>如果是JDK1.7，则先判断是否需要扩容，如果要扩容则进行扩容，如果不扩容，则头插法插入当前位置的链表</li><li>如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红黑树Node，还是链表Node<ul><li>如果是红黑树Node，则key和value封装为一个红黑树节点并添加到红黑树中去</li><li>如果是链表Node，则将key和value封装为一个链表node并用尾插法插入链表的最后位置去，如果结点数大于8，则将链表转为红黑树</li><li>将key和value封装为node插入到链表和红黑树中后，在判断是否需要扩容。</li></ul></li></ul></li></ol><p><strong>Java7：通过put进来的key–&gt;hashcode–&gt;下标i(与运算)–&gt;数组有相同下标–&gt;头插法–&gt;是否扩容(元素个数&gt;16 * 0.75 &#x3D; 12)</strong></p><p><strong>扩容：rehash（hash&lt;数组容量）–&gt; 数组容量 * 2–&gt;遍历老数组—&gt;重写计算下标(与运算，只有2种情况，原下标和原下标 + 老数组容量)–&gt;尾插法插入新数组</strong></p><p><strong>Java8：通过put进来的key–&gt;hashcode–&gt;下标i(与运算)–&gt;数据有相同下标(两种情况)–&gt;尾插法–&gt;是否扩容(元素个数&gt;16 * 0.75 &#x3D; 12)</strong></p><ol><li><strong>链表：key和value分装成Node节点尾插法–&gt;是否转成红黑树（链表&gt;8和数组容量&gt;64不然进行扩容）（转成红黑树时会先转成双向链表）</strong></li><li><strong>红黑树：key和value分装成TreeNode节点尾插法</strong></li></ol><p><strong>扩容： 数组容量 * 2–&gt;遍历老数组–&gt;分为3种</strong></p><ol><li><strong>数组–&gt;计算下标放入数组</strong></li><li><strong>链表–&gt;只会计算出两个下标–&gt;分成两种链表–&gt;加入新数组</strong></li><li><strong>红黑树–&gt;计算出两个下标–&gt;分成两种红黑树–&gt;加入新数组–&gt;判断红黑树是否转成链表（红黑树节点数&lt;6）</strong></li></ol><h3 id="为什么引入ConcurrentHashMap？"><a href="#为什么引入ConcurrentHashMap？" class="headerlink" title="为什么引入ConcurrentHashMap？"></a>为什么引入ConcurrentHashMap？</h3><ol><li>线程不安全的HashMap</li><li>效率低下的HashTable</li><li>ConcurrentHashMap的锁分段技术可提升并发访问效率</li></ol><p><strong>将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</strong></p><h2 id="谈谈ConcurrentHashMap的扩容机制"><a href="#谈谈ConcurrentHashMap的扩容机制" class="headerlink" title="谈谈ConcurrentHashMap的扩容机制"></a>谈谈ConcurrentHashMap的扩容机制</h2><p>1.7版本</p><ol><li>1.7版本的ConcurentHashMap基于Segment分段实现的，将其视为数组，每个元素的一个Segment</li><li>每个Segment是一个小型的HashMap</li><li>每个Segment内部会进行扩容，和HashMap扩容逻辑相近</li><li>最后生成一个新数组，将元素转移到新数组中</li><li>扩容时的判断也是每个Segment内部单独判断的，判断是否超过阈值</li></ol><p>1.8版本</p><ol><li>1.8版本的ConcurentHashMap不再基于Segment分段实现的</li><li>某个线程put时，发现超过阈值，则进行扩容</li><li>ConcurentHashMap支持多个线程同时扩容，扩容前生成一个新的数组</li><li>将原数组分组，每组交由不同的线程来进行元素的转移，每个线程负责不同的元素转移工作</li></ol><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><p>深拷贝和浅拷贝是指对象的拷贝，一个对象中存在两种类型的属性，一种是基本数据类型，一种是实例对象的引用</p><ol><li>浅拷贝：只会拷贝基本数据类型，以及实例对象的引用地址</li><li>深拷贝：即会拷贝基础数据类型，也会对实例对象的引用地址和实例对象进行复制</li></ol><h2 id="CopyOnWriteArrayList的底层原理是怎样的"><a href="#CopyOnWriteArrayList的底层原理是怎样的" class="headerlink" title="CopyOnWriteArrayList的底层原理是怎样的"></a>CopyOnWriteArrayList的底层原理是怎样的</h2><p>ArrayList线程是不安全的，但是写线程时，读线程会阻塞住，减少效率</p><ol><li>首先CopyOnWriteArrayList内部也是数组实现的，在向CopyOnWriteArrayList添加元素时，会复制一个新的数组，写操作在数组上进行，读操作在原数组上进行</li><li>并且写操作会加锁，防止出现并发写入丢失数据的问题</li><li>写操作结束后会把原数组指向新数组</li><li>适用于读多写少的场景，但是读操作不是实时最新的数据，所以不适用实时性很高的场景</li></ol><h2 id="什么是字节码？采用字节码的好处是什么"><a href="#什么是字节码？采用字节码的好处是什么" class="headerlink" title="什么是字节码？采用字节码的好处是什么"></a>什么是字节码？采用字节码的好处是什么</h2><p>编译器（javac）将Java源文件（*.java）编译成为字节码（*.class）.可以做到一次编译到处运行</p><p>好处：一方面实现了跨平台，另一方面提高了代码执行的性能</p><h2 id="Java中的异常体系是怎样的"><a href="#Java中的异常体系是怎样的" class="headerlink" title="Java中的异常体系是怎样的"></a>Java中的异常体系是怎样的</h2><ul><li>Java中所有的异常来自顶级父类Throwable。</li><li>Throwable下有两个子类Expection和Error。</li><li>Error表示非常严重的错误，通常出现这种错误程序执行不了，也不需要去捕获</li><li>Exception表示异常，表示程序出现Exception时，是可以靠程序自己解决的，我们可以捕获这些异常来做特殊处理</li><li>Exception的子类通常又可以分为RuntimeException和非RuntimeException（编译异常）两类</li></ul><h2 id="在Java的异常处理机制中，什么时候应该抛出异常，什么时候应该捕获异常？"><a href="#在Java的异常处理机制中，什么时候应该抛出异常，什么时候应该捕获异常？" class="headerlink" title="在Java的异常处理机制中，什么时候应该抛出异常，什么时候应该捕获异常？"></a>在Java的异常处理机制中，什么时候应该抛出异常，什么时候应该捕获异常？</h2><p>异常相当于一种提示，如果处理不了，可以直接抛给上层方法</p><p>考虑本方法是否可以处理该异常，如果可以处理，则捕获异常</p><hr><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring是如何创建Bean的对象的"><a href="#Spring是如何创建Bean的对象的" class="headerlink" title="Spring是如何创建Bean的对象的"></a>Spring是如何创建Bean的对象的</h2><p>基于构造对象和set依赖注入来构造的</p><p>spring启动时，会先创建一个spring容器，然后循环遍历包含@Component（controller、service、repository）注解的类，基于构造方法创建这个bean对象放入单例池中，然后扫描bean对象中有无@Autowired注解的对象，对其进行依赖注入，扫描是基于反射来实现的</p><p>UserService–&gt;无参构造方法–&gt;对象–&gt;依赖注入–&gt;–&gt;初始化前（@PostConstruct）–&gt;初始化(InitializingBean)–&gt;初始化后–&gt;放入单例池中–&gt;bean对象</p><p><strong>UserService类–&gt;推断构造方法–&gt;普通对象–&gt;依赖注入–&gt;初始化前（@PostConstruct）–&gt;初始化(InitializingBean)–&gt;初始化后(AOP)–&gt;代理对象–&gt;放入单例池中–&gt;Bean对象</strong></p><p>@PostConstruct：如果想在生成对象时完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入，那么久无法在构造函数中实现。为此，可以使用@PostConstruct注解一个方法来完成初始化，@PostConstruct注解的方法将会在依赖注入完成后被自动调用。</p><p>InitializingBean：为bean提供了初始化方式的接口，只包括afterPropertiesSet方法，继承该接口，会调用afterPropertiesSet方法</p><p>bean的实例化就是用基于无参构造方法获得的对象</p><p>bean的初始化就是执行实例化这个对象中的某一个方法，例如执行实现InitializingBean接口的方法（实现InitializingBean接口），或者是bean定义的方法</p><h2 id="推断构造方法"><a href="#推断构造方法" class="headerlink" title="推断构造方法"></a>推断构造方法</h2><p>1.只有<strong>一个无参</strong>构造方法，那么实例化就只能使用这个构造方法了。</p><p>2.只有<strong>一个有参</strong>构造方法，不管构造方法参数是一个还是多个，那么Spring会根据构造方法的参数信息去寻找bean，然后传给构造方法（前提是根据参数类型或者名字可以找到唯一的bean）</p><p>3.多个构造方法，并且开发者指定了想使用的构造方法，那么就用这个构造方法<br>        通过@Autowired注解，@Autowired注解可以写在构造方法上，所以哪个构造方法上写了@Autowired注解，表示开发者想使用哪个构造方法。通过@Autowired注解的方式，需要Spring通过byType+byName的方式去找到符合条件的bean作为构造方法的参数值，当然找不到是要报错的</p><h2 id="什么是byType再byName"><a href="#什么是byType再byName" class="headerlink" title="什么是byType再byName"></a>什么是byType再byName</h2><p>通过@Autowired注解时，如果参数为bean对象，那么需要去Spring容器中寻找bean，先从参数类型来寻找，再由参数名字来寻找</p><h2 id="什么是AOP，AOP的底层工作是什么"><a href="#什么是AOP，AOP的底层工作是什么" class="headerlink" title="什么是AOP，AOP的底层工作是什么"></a>什么是AOP，AOP的底层工作是什么</h2><p>AOP全称（Aspect Oriented Programming）面向切片编程的简称。AOP面向方面编程基于IOC(控制反转)</p><p>AOP 底层原理是使用动态代理。</p><p>父子类</p><p>UserServiceProxy对象—&gt;UserService代理对象—&gt;UserService代理对象.target&#x3D;普通对象—&gt;放入Map单例池</p><p>UserService代理对象.test()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserServiceProxy对象是UserService的代理对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">extends</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">UserService target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//@Before切面逻辑</span></span><br><span class="line"><span class="comment">//target.test();  //普通对象.test();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring事务底层是怎么工作的？"><a href="#Spring事务底层是怎么工作的？" class="headerlink" title="Spring事务底层是怎么工作的？"></a>Spring事务底层是怎么工作的？</h2><p>​Spring事务属于AOP范畴，是通过<strong>代理对象（只有代理对象时才生效）</strong>对数据库的操作来进行事务处理，并且Spring事务的底层也是需要数据库的支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//先检查是否有注解@Transactional</span><br><span class="line">//事务管理器新建一个数据库连接conn</span><br><span class="line">//关闭自动提交conn.autocommit = false  </span><br></pre></td></tr></table></figure><p>@Configuration注解的作用</p><ol><li>告诉spring这是一个配置类，相当于spring的xml配置文件</li><li>被@Configuration 注解的类，会被cglib代理进行增强</li><li>@Conﬁguration类允许通过调用同一类中的其他@Bean方法来定义bean之间的依赖关系，保证@Bean的对象作用域受到控制，避免多例（相当于只用一个bean）</li></ol><hr><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="Java中有哪几种方式来创建线程执行任务"><a href="#Java中有哪几种方式来创建线程执行任务" class="headerlink" title="Java中有哪几种方式来创建线程执行任务?"></a>Java中有哪几种方式来创建线程执行任务?</h2><ol><li>继承Thread类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承Thread类，创建一个新的线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">// 重写了Thread类的run()方法，将需要并发执行的用户业务代码编写在继承的run()方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; 轮次：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName()+<span class="string">&quot; 运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadDemo</span> <span class="variable">threadDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        threadDemo.start();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现Runnable接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用接口的方式进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread04</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;t1线程运行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread04</span> <span class="variable">thread04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread04</span>();</span><br><span class="line">        <span class="comment">// 线程启动的唯一方法是通过 Thread 类的 start()</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread04);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;main主线程进行运行的处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>实现Callable接口</li></ol><p>当我们在处理一个任务的时候，我们需要对外面进行返回值的处理，那么我们就压使用Callable来创建可以带返回值的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建具有返回值的线程</span></span><br><span class="line">        FutureTask&lt;String&gt; futureTask =  <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1线程进行运行处理了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;哈哈哈，我有返回值了&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 线程启动的唯一方法是通过 Thread 类的 start()</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">// 获取返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程获取到的返回值：&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用线程池来创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demoThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.excute(<span class="keyword">new</span> <span class="title class_">demoThread</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//线程逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么不建议使用Executors来创建线程池"><a href="#为什么不建议使用Executors来创建线程池" class="headerlink" title="为什么不建议使用Executors来创建线程池?"></a>为什么不建议使用Executors来创建线程池?</h2><p>有可能造成内存溢出(OOM)，我们使用Executors创建线程池也不能定义线程的名字，不利于排查问题</p><h2 id="线程池有哪几种状态"><a href="#线程池有哪几种状态" class="headerlink" title="线程池有哪几种状态?"></a>线程池有哪几种状态?</h2><ol><li><strong>RUNNING</strong></li></ol><p>​表示线程正在运行，既能<strong>接收新任务</strong>，也会<strong>正常的处理队列中的任务</strong></p><ol start="2"><li><strong>SHUNTDOWN</strong></li></ol><p>​当线程调用线程池的shutdown()方法时，会进入shutdown状态，表示线程正处于正在关闭状态，此状态下线程池<strong>不会接收新任务</strong>，但是<strong>会把队列中的任务处理掉</strong></p><ol start="3"><li><strong>STOP</strong></li></ol><p>​当调用线程池的shutdownnow()方法时，线程池就进入stop状态，表示线程池处于正在停止状态，此状态下的<strong>线程池既不会接收新任务，也不会处理队列中的任务</strong></p><ol start="4"><li><strong>TIDYING</strong></li></ol><p>​线程池中没有线程在运行，线程池会自动变为tidying，并且会调用terminated()，该方法为空方法，留给程序员拓展</p><ol start="5"><li><strong>TERMINATED</strong></li></ol><p>​terminated()方法执行完，线程池状态就会变为TERMINATED</p>]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城</title>
      <link href="/2023/02/25/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/"/>
      <url>/2023/02/25/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><h4 id="1）linux安装docker"><a href="#1）linux安装docker" class="headerlink" title="1）linux安装docker"></a>1）linux安装docker</h4><p>参考网址：<a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></p><p>删除linux中的docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><p>安装docker所需的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>设置docker下载网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装docker引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>检查docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>设置docker开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="2-配置镜像加速-阿里云"><a href="#2-配置镜像加速-阿里云" class="headerlink" title="2)配置镜像加速(阿里云)"></a>2)配置镜像加速(阿里云)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://wzyqfxu2.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="3）docker安装mysql"><a href="#3）docker安装mysql" class="headerlink" title="3）docker安装mysql"></a>3）docker安装mysql</h4><p>安装mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">docker run -p 3306:3306 --name mysql \</span></span><br><span class="line"><span class="string">-v /mydata/mysql/log:/var/log/mysql \</span></span><br><span class="line"><span class="string">-v /mydata/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string">-v /mydata/mysql/conf:/etc/mysql \</span></span><br><span class="line"><span class="string">-e MYSQL_ROOT_PASSWORD=1234 \</span></span><br><span class="line"><span class="string">-d mysql:5.7</span></span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# pwd</span></span><br><span class="line"><span class="attr">/mydata/mysql/conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# cat my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">collation-server</span>=<span class="string">utf8_unicode_ci</span></span><br><span class="line"><span class="attr">skip-character-set-client-handshake</span></span><br><span class="line"><span class="attr">skip-name-resolve</span></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# docker restart mysql</span></span><br><span class="line"><span class="attr">mysql</span></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# </span></span><br></pre></td></tr></table></figure><p>设置启动docker时，即运行mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure><h4 id="4-docker安装redis"><a href="#4-docker安装redis" class="headerlink" title="4)docker安装redis"></a>4)docker安装redis</h4><p>安装redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0.5</span><br></pre></td></tr></table></figure><p>启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span></span><br><span class="line"><span class="string">-v/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span></span><br><span class="line"><span class="string">-d redis:5.0.5 redis-server /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure><p>连接到docker的redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set key1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>windows远程连接redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h ip -p 6379 -a password</span><br></pre></td></tr></table></figure><p>设置启动docker时，即运行redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure><hr><h2 id="2-创建maven工程"><a href="#2-创建maven工程" class="headerlink" title="2.创建maven工程"></a>2.创建maven工程</h2><p>1.建一个maven项目，并在里面新建5个模块</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/1.JPG"></p><p>2.修改guli_mall下的pom文件并添加，令其聚合其他5个工程项目</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/2.JPG"></p><p>3.修改.gitignore文件，忽略idea中不必要的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**/mvnw</span><br><span class="line">**/mvnw.cmd</span><br><span class="line"></span><br><span class="line">**/.mvn</span><br><span class="line">**/target/</span><br><span class="line">.idea</span><br><span class="line">**/.gitignore</span><br></pre></td></tr></table></figure><hr><h2 id="3-执行sql脚本"><a href="#3-执行sql脚本" class="headerlink" title="3.执行sql脚本"></a>3.执行sql脚本</h2><p>创建数据库并且导入sql文件</p><hr><h2 id="4-快速开发"><a href="#4-快速开发" class="headerlink" title="4.快速开发"></a>4.快速开发</h2><p>1.从gitee上克隆人人开源项目工程</p><p><a href="https://gitee.com/renrenio">人人开源 (gitee.com)</a></p><p>2.将renren-fast放入guli_mall项目工程中，配置文件，加入聚合</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;module&gt;renren-fast&lt;/module&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建新的数据库gulimall_admin，并执行renren-fast中的sql语句</p><p>4.配置yml修改地址和数据库信息,启动项目测试成功</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/gulimall_admin?testserverTimezone=UTC&amp;characterEncoding=utf8&amp;useSSL=false&amp;Unicode=true</span></span><br><span class="line"><span class="attr">username</span>: <span class="string">账号</span></span><br><span class="line"><span class="attr">password</span>: <span class="string">密码</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/3.JPG"></p><p>5.将renren-fast-vue导入vscode</p><p>6.安装运行环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass@npm:dart-sass</span><br></pre></td></tr></table></figure><p>7.启动前端项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/4.JPG"></p><p>测试项目</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/5.JPG"></p><p>8.从gitee中克隆renren-generator放入guli_mall项目工程中，加入module中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;module&gt;renren-generator&lt;/module&gt;</span></span><br></pre></td></tr></table></figure><p>9.自动生成代码</p><p>修改yml中需要生成的代码对应的数据库（以product为例）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/gulimall_pms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p>修改properties中的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主路径</span></span><br><span class="line"><span class="attr">mainPath</span>=<span class="string">com.study</span></span><br><span class="line"><span class="comment">#包路径</span></span><br><span class="line"><span class="attr">package</span>=<span class="string">com.study.gulimall</span></span><br><span class="line"><span class="comment">#生成代码的模块</span></span><br><span class="line"><span class="attr">moduleName</span>=<span class="string">product</span></span><br><span class="line"><span class="comment">#数据库的表名的前缀</span></span><br><span class="line"><span class="attr">tablePrefix</span>=<span class="string">pms_</span></span><br></pre></td></tr></table></figure><p>10.启动项目，进入localhost中生成代码</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/6.JPG"></p><p>11.将生成的main文件导入gulimall-product中</p><p>12.新建一个gulimall-common模块将所有的微服务优先依赖common</p><p>需要其他模块的pom配置依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--优先依赖common--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置common中的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将renren-fast中的utils包导入common中,解决爆红错误</p><p>product整合mybatis-plus</p><p>1）配置product中的yml文件连接数据库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/gulimall_pms</span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>2)启动类加入扫描包的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.study.gulimall.product.dao&quot;)</span></span><br></pre></td></tr></table></figure><p>3)yml配置sql映射文件位置和自增id</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">mapper-locations</span>: <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">db-config</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">id-type</span>: <span class="string">auto</span></span><br></pre></td></tr></table></figure><p>4)测试test，成功运行</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/10.JPG"></p><p>将其他的项目按照product步骤自动生成代码</p><p>10.给所有的功能模块配置端口号(7000,8000,9000,10000,11000)</p><hr><h2 id="5-SpringCloud-Alibaba"><a href="#5-SpringCloud-Alibaba" class="headerlink" title="5.SpringCloud-Alibaba"></a>5.SpringCloud-Alibaba</h2><p>介绍：开发分布式应用微服务的必须组件，用来代替SpringCloud中的一些过期的组件</p><p><strong>组件版本的关系</strong></p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/11.JPG"></p><p><strong>版本选择</strong></p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/12.JPG"></p><h4 id="1-common中的pom文件导入Spring-Cloud-Alibaba"><a href="#1-common中的pom文件导入Spring-Cloud-Alibaba" class="headerlink" title="1.common中的pom文件导入Spring-Cloud-Alibaba"></a>1.common中的pom文件导入Spring-Cloud-Alibaba</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 将Nacos作为注册中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        服务注册/发现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="docker安装nacos"><a href="#docker安装nacos" class="headerlink" title="docker安装nacos"></a>docker安装nacos</h4><p>下载镜像（版本为1.1.3）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.1.3</span><br></pre></td></tr></table></figure><p>在本地home文件中挂载目录，挂载配置以及日志文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/nacos/logs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/nacos/init.d</span><br></pre></td></tr></table></figure><p>在 &#x2F;mydata&#x2F;nacos&#x2F;init.d 路径下创建custom.properties文件并粘贴相关配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/nacos/init.d/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch custom.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi custom.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#spring.security.enabled=false</span><br><span class="line">#management.security=false</span><br><span class="line">#security.basic.enabled=false</span><br><span class="line">#nacos.security.ignore.urls=/**</span><br><span class="line">#management.metrics.export.elastic.host=http://localhost:9200</span><br><span class="line"># metrics for prometheus</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"></span><br><span class="line"># metrics for elastic search</span><br><span class="line">#management.metrics.export.elastic.enabled=false</span><br><span class="line">#management.metrics.export.elastic.host=http://localhost:9200</span><br><span class="line"></span><br><span class="line"># metrics for influx</span><br><span class="line">#management.metrics.export.influx.enabled=false</span><br><span class="line">#management.metrics.export.influx.db=springboot</span><br><span class="line">#management.metrics.export.influx.uri=http://localhost:8086</span><br><span class="line">#management.metrics.export.influx.auto-create-db=true</span><br><span class="line">#management.metrics.export.influx.consistency=one</span><br><span class="line">#management.metrics.export.influx.compressed=true</span><br></pre></td></tr></table></figure><p>启动nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8848:8848 -e MODE=standalone -v /mydata/nacos/logs:/mydata/nacos/logs -v /mydata/nacos/init.d/custom.properties:/mydata/nacos/init.d/custom.properties --name nacos nacos/nacos-server:1.1.3</span><br></pre></td></tr></table></figure><p>设置启动docker时，即运行nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update nacos --restart=always</span><br></pre></td></tr></table></figure><h4 id="2-项目指定nacos注册中心的地址和指定的服务"><a href="#2-项目指定nacos注册中心的地址和指定的服务" class="headerlink" title="2.项目指定nacos注册中心的地址和指定的服务"></a>2.项目指定nacos注册中心的地址和指定的服务</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">application</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure><h4 id="3-使用-EnableDiscoveryClient注解开启服务注册发现功能"><a href="#3-使用-EnableDiscoveryClient注解开启服务注册发现功能" class="headerlink" title="3.使用@EnableDiscoveryClient注解开启服务注册发现功能"></a>3.使用@EnableDiscoveryClient注解开启服务注册发现功能</h4><p>加入到coupon项目的启动类中</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/13.JPG"></p><h4 id="4-实现OpenFeign组件"><a href="#4-实现OpenFeign组件" class="headerlink" title="4.实现OpenFeign组件"></a>4.实现OpenFeign组件</h4><p>​Feign集成了Ribbon、RestTemplate实现了负载均衡的执行Http调用，只不过对原有的方式（Ribbon+RestTemplate）进行了封装，开发者不必手动使用RestTemplate调服务，而是定义一个接口，在这个接口中标注一个注解即可完成<strong>服务调用</strong>，这样更加符合面向接口编程的宗旨，简化了开发。</p><p>​OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><h5 id="用openFeign实现会员服务调用优惠券服务"><a href="#用openFeign实现会员服务调用优惠券服务" class="headerlink" title="用openFeign实现会员服务调用优惠券服务"></a>用openFeign实现会员服务调用优惠券服务</h5><ol><li>先再coupon的controller中写一个测试方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/member/test/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">membercoupons</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CouponEntity</span> <span class="variable">couponEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponEntity</span>();</span><br><span class="line">    couponEntity.setCouponName(<span class="string">&quot;满100减50&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, Arrays.asList(couponEntity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入openFeign</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写一个调用远程服务的接口</li></ol><p>​写入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br></pre></td></tr></table></figure><p>​写入调用方法，方法名需要调用的功能的方法的完整签名相同，并写入完整注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/coupon/coupon/member/test/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">membercoupons</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个声明式的远程调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/test/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">membercoupons</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>开启远程调用功能，启动类中加入注解@EnableFeignClients</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要告诉注解接口所在的包</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.atguigu.gulimall.member.feign&quot;)</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在member中写一测试用例，调用coupons中的membercoupons()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MemberEntity</span> <span class="variable">memberEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line">        memberEntity.setNickname(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">R</span> <span class="variable">membercoupons</span> <span class="operator">=</span> couponFeignService.membercoupons();</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;member&quot;</span>,memberEntity).put(<span class="string">&quot;coupons&quot;</span>,membercoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-Nacos配置中心"><a href="#5-Nacos配置中心" class="headerlink" title="5.Nacos配置中心"></a>5.Nacos配置中心</h4><p>nacos文档：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">什么是 Nacos</a></p><p>​nacos配置中心：原本调用配置中的value需要写在配置文件中，nacos配置中心可以直接在网页上统一管理配置文件，免去修改配置文件后还需重新上线部署的麻烦。</p><p>​common导入配置中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        配置中心来做配置管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​在服务功能的配置文件中加入bootstrap.properties（优先级最高）</p><p>​写入配置中心的模块和服务器地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=gulimall-coupon</span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure><p>​动态的获取配置，在controller中加入注解@RefreshScope</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态获取并刷新配置</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="comment">//获取到配置</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;配置项的名&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>​如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置。</p><p>​在nacos网页中添加一个配置文件</p><p>​配置名称为bootstrap.properties中配置的名字.properties，启动项目后，后台显示如下</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/15.JPG"></p><p>​添加配置文件后</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/14.JPG"></p><hr><p>​测试修改nacos配置文件后，是否有改变</p><p>​修改前<img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/17.JPG"></p><p>​修改后<img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/16.JPG"></p><p><strong>细节</strong></p><ol><li><p>命名空间：配置隔离：</p><ul><li>默认（public(保留空间)）:默认配置所有配置都在public空间上</li><li>自定义命名：创建一个空间，写入不同的配置。在项目的bootstarp.properties中写入,来匹配新建的空间</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//后面的为配置中心生成的id</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">e52c29f0-ee65-4733-9ad9-9bf43a745af7 </span></span><br></pre></td></tr></table></figure><ul><li>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，这样只加载自己命名下的空间</li></ul></li><li><p>配置集：所有配置的集合</p></li><li><p>配置集id：Data_Id</p></li><li><p>配置分组：默认所有的配置集都属于：DEFAULT_GROUP</p><ul><li><p>分组后可以修改项目配置文件来指定group\</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>由此可以让每个微服务创建自己的命名空间，使用配置分组区分环境（dev，test，pro….）</p><h5 id="加载多配置集"><a href="#加载多配置集" class="headerlink" title="加载多配置集"></a><strong>加载多配置集</strong></h5><p>将配置文件yml中的datasource和mybatis-plus还有端口号拆分出来，</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/18.JPG"></p><p>在项目的bootstarp.properties中写入,来匹配nacos上的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//加载一个配置文件</span></span><br><span class="line"><span class="attr">//对应data_id</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="attr">//对应分组</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">//对应是否实时刷新配置</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><strong>要点</strong></p><ol><li>微服务任何配置信息，任何配置文件都可以放在配置中心中</li><li>只需要在bootstrap.properties说明加载配置中心中哪些配置文件即可</li><li>以前SpringBoot任何方法从配置文件中获取值，注解@Value，@ConfigurationProperties，都能使用，配置中心有的优先使用配置中心中的。</li></ol><h2 id="6-Gateway"><a href="#6-Gateway" class="headerlink" title="6.Gateway"></a>6.Gateway</h2><p>Gateway: 网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等。</p><p>流程：请求到网关后，网关利用<strong>断言(Predicate)<strong>来判断是否符合</strong>路由(Route)<strong>规则，符合后路由到指定位置，途中会进行</strong>过滤(Filter)</strong></p><p><strong>案例</strong></p><ol><li>创建“gulimall-gateway”</li><li>添加“gulimall-common”依赖和“spring-cloud-starter-gateway”依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//gulimall-common依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//spring-cloud-starter-gateway依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><ol start="3"><li><p>开启服务的注册发现</p><ol><li>在启动类上加入注解@EnableDiscoveryClient</li><li>配置nacos的注册中心地址</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">88</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置nacos的配置中心</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">6c62d777-2fc8-4ac7-b9b7-0f841e7f40a3</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建“application.yml”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: test_route</span><br><span class="line">          uri: https://www.baidu.com</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/</span><br></pre></td></tr></table></figure></li><li><p>测试localhost:88即可跳转百度</p></li></ol></li></ol><h2 id="7-开发商品服务模块"><a href="#7-开发商品服务模块" class="headerlink" title="7.开发商品服务模块"></a>7.开发商品服务模块</h2><h4 id="递归树形结构获取数据"><a href="#递归树形结构获取数据" class="headerlink" title="递归树形结构获取数据"></a>递归树形结构获取数据</h4><ol><li><p>将pms_category.sql文件导入数据库</p></li><li><p>实现查出所有分类以及子分类，以树形结构组装起来方法</p><ol><li>在CategoryEntity类种加入children</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//children可能没有children，所有加入注解@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="comment">//JsonInclude.Include.NON_EMPTY: null、集合数组等没有内容、空字符串等，都不会被序列化</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="meta">@TableField(exist=false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure><ol><li>在CategoryController中写入方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查出所有分类以及子分类，以树形结构组装起来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list/tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; entities = categoryService.listWithTree();</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>, entities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在CategoryService接口中写入方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在CategoryServiceImpl写入业务逻辑</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span> &#123;</span><br><span class="line">       List&lt;CategoryEntity&gt; entities = <span class="built_in">super</span>.list();</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       <span class="comment">//获取父节点</span></span><br><span class="line">       List&lt;CategoryEntity&gt; list = entities.stream().filter(entity -&gt; entity.getParentCid() == <span class="number">0</span>).map(</span><br><span class="line">               (entity) -&gt; &#123;</span><br><span class="line">                   <span class="comment">//给每个父节点设置子节点</span></span><br><span class="line">                   entity.setChildren(getChildrens(entity, entities));</span><br><span class="line">                   <span class="keyword">return</span> entity;</span><br><span class="line">               &#125;</span><br><span class="line">       ).sorted((entity1,entity2) -&gt; &#123;</span><br><span class="line">           <span class="comment">//菜单的排序</span></span><br><span class="line">           <span class="keyword">return</span> (entity1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : entity1.getSort()) - </span><br><span class="line">                 (entity2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> :entity2.getSort());</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//递归查找所有菜单的子菜单</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildrens</span><span class="params">(CategoryEntity parent,List&lt;CategoryEntity&gt; all)</span> &#123;</span><br><span class="line">       List&lt;CategoryEntity&gt; childrens = all.stream().filter(</span><br><span class="line">           children -&gt; Objects.equals(children.getParentCid(), parent.getCatId())).map(</span><br><span class="line">               (children) -&gt; &#123;</span><br><span class="line">                   children.setChildren(getChildrens(children, all));</span><br><span class="line">                   <span class="keyword">return</span> children;</span><br><span class="line">               &#125;</span><br><span class="line">       ).sorted((children1,children2) -&gt; &#123;</span><br><span class="line">           <span class="keyword">return</span> (children1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : children1.getSort()) - </span><br><span class="line">                  (children2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : children2.getSort());</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line">       <span class="keyword">return</span> childrens;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​知识点：构建java树（3种）<br>​ 链接<a href="https://blog.csdn.net/qq_58148854/article/details/125901888">(12条消息) 三种方法构建Java树形结构_java 树形结构_遨游在知识的海洋里无法自拔的博客-CSDN博客</a></p></li></ol><p>​stream流构建树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取父节点</span></span><br><span class="line">List&lt;TreeSelect&gt; collect = trees.stream().filter(m -&gt; m.getParentId() == <span class="number">0</span>).map(</span><br><span class="line">    (m) -&gt; &#123;</span><br><span class="line">        m.setChildren(getChildrenList(m, trees));</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">).collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取子节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeSelect&gt; <span class="title function_">getChildrenList</span><span class="params">(TreeSelect tree, List&lt;TreeSelect&gt; list)</span>&#123;</span><br><span class="line">        List&lt;TreeSelect&gt; children = list.stream().filter(item -&gt; Objects.equals(item.getParentId(), tree.getId())).map(</span><br><span class="line">                (item) -&gt; &#123;</span><br><span class="line">                    item.setChildren(getChildrenList(item, list));</span><br><span class="line">                    <span class="keyword">return</span> item;</span><br><span class="line">                &#125;</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="配置网关路由与路由重写"><a href="#配置网关路由与路由重写" class="headerlink" title="配置网关路由与路由重写"></a>配置网关路由与路由重写</h4><ol><li>启动renren-fast的前后端，登录  账号admin  密码admin</li><li>添加商品系统到菜单管理中，如下图</li></ol><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/19.JPG"></p><ol start="3"><li>在商品系统添加分类维护，路由: product&#x2F;category</li></ol><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/20.JPG"></p><ol start="4"><li><p>在renren-fast-vue项目中的src&#x2F;views中创建product&#x2F;category.vue(或导入) </p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/21.JPG"> </p></li><li><p>修改前端发出的所有路径static&#x2F;config&#x2F;index.js，都改为88接口的下api</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.SITE_CONFIG[&#x27;baseUrl&#x27;] = &#x27;http://localhost:88/api&#x27;;</span><br></pre></td></tr></table></figure><ol start="6"><li>配置renrenfast的application.yml文件，加入nacos注册中心</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">application:</span><br><span class="line">  name: renren-fast</span><br><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      server-addr: locahost:8848</span><br></pre></td></tr></table></figure><ol start="7"><li>配置gateway中的路由，使得所有<a href="http://localhost:88/api%E8%B7%AF%E7%94%B1%E5%88%B0localhost:8080/renren-fast">http://localhost:88/api路由到localhost:8080/renren-fast</a></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-</span> <span class="string">id: admin_route</span></span><br><span class="line">  <span class="attr">//负载均衡</span></span><br><span class="line">  <span class="attr">uri</span>: <span class="string">lb://renren-fast</span></span><br><span class="line">  <span class="attr">//标准路径</span></span><br><span class="line">  <span class="attr">predicates</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">  <span class="attr">//在跳转时将/api/路径去除</span></span><br><span class="line">  <span class="attr">filters</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>测试结果(完成)</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/22.JPG"> </p><h4 id="网关同一配置跨域"><a href="#网关同一配置跨域" class="headerlink" title="网关同一配置跨域"></a>网关同一配置跨域</h4><p>跨域问题：  (请求方式：Method&#x3D;OPTIONS)</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/23.jpg"></p><p>解决办法，配置gateway中的config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallCorsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、配置跨域</span></span><br><span class="line">        <span class="comment">//头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//来源</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//cookie</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树形展示三级分类数据"><a href="#树形展示三级分类数据" class="headerlink" title="树形展示三级分类数据"></a>树形展示三级分类数据</h4><p>在gateway中的yml配置路由</p><p><strong>注意</strong>：同一路径下，精确路径放入模糊路径前，否则模糊路径会抢占精确路径的路由</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-</span> <span class="string">id: product_route</span></span><br><span class="line">  <span class="attr">uri</span>: <span class="string">lb://gulimall-product</span></span><br><span class="line">  <span class="attr">predicates</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">  <span class="attr">filters</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="attr">-</span> <span class="string">id: admin_route</span></span><br><span class="line">  <span class="attr">uri</span>: <span class="string">lb://renren-fast</span></span><br><span class="line">  <span class="attr">predicates</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">  <span class="attr">filters</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>将product模块配置到nacos注册中心 (application.yml)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      server-addr: localhost:8848</span><br></pre></td></tr></table></figure><p>将product模块配置到nacos配置中心(bootstrap.properties)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=gulimall-product</span><br><span class="line">spring.cloud.nacos.config.server-addr=localhost:8848</span><br><span class="line">spring.session.redis.namespace=8900c18d-be4e-45fb-b4a6-e983cab37807</span><br></pre></td></tr></table></figure><p>开启服务注解@EnableDiscoveryClient</p><p>展示结果图</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/24.JPG"></p><h4 id="加入删除-x2F-批量删除-逻辑删除功能"><a href="#加入删除-x2F-批量删除-逻辑删除功能" class="headerlink" title="加入删除&#x2F;批量删除-逻辑删除功能"></a>加入删除&#x2F;批量删除-逻辑删除功能</h4><p>CategoryController中写入逻辑删除功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] catIds)</span>&#123;</span><br><span class="line"></span><br><span class="line">    categoryService.removeMenuByIds(Arrays.asList(catIds));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入categoryService中的removeMenuByIds方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void removeMenuByIds(List&lt;Long&gt; asList);</span><br></pre></td></tr></table></figure><p>在categoryServiceImpl中实现逻辑删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeMenuByIds</span><span class="params">(List&lt;Long&gt; asList)</span> &#123;</span><br><span class="line">    <span class="comment">//TODO  1、检查当前删除的菜单，是否被别的地方引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除</span></span><br><span class="line">    baseMapper.deleteBatchIds(asList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置全局的逻辑删除规则（省略） 当前版本可省略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>配置逻辑删除的组件Bean（省略）当前版本可省略</p><p>给Bean加上逻辑删除注解@TableLogic</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure><p>在“src&#x2F;main&#x2F;resources&#x2F;application.yml”文件中，设置日志级别，打印出SQL语句,方便查看</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.bigdata.gulimall.product:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><strong>配置过后，删除语句时会变成逻辑删除(将原来的delete语句改为update语句)，而不是数据删除</strong></p><h4 id="加入新增-加入新增功能"><a href="#加入新增-加入新增功能" class="headerlink" title="加入新增-加入新增功能"></a>加入新增-加入新增功能</h4><p>在CategoryController中加入保存方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line">   * 保存</span><br><span class="line">   */</span><br><span class="line">  @RequestMapping(&quot;/save&quot;)</span><br><span class="line">  //@RequiresPermissions(&quot;product:category:save&quot;)</span><br><span class="line">  public R save(@RequestBody CategoryEntity category)&#123;</span><br><span class="line">categoryService.save(category);</span><br><span class="line"></span><br><span class="line">      return R.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="加入修改-加入修改功能"><a href="#加入修改-加入修改功能" class="headerlink" title="加入修改-加入修改功能"></a>加入修改-加入修改功能</h4><p>在CategoryController中加入修改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="comment">//@RequiresPermissions(&quot;product:category:save&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> CategoryEntity category)</span>&#123;</span><br><span class="line">categoryService.save(category);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> R.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="加入修改-加入拖拽功能"><a href="#加入修改-加入拖拽功能" class="headerlink" title="加入修改-加入拖拽功能"></a>加入修改-加入拖拽功能</h4><p>​核心业务全是前端业务（跳过）</p><p>后端业务：在CategoryController中加入修改方法(批量保存前端拖拽完后的数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update/sort&quot;)</span></span><br><span class="line"><span class="comment">//@RequiresPermissions(&quot;product:category:update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">updateSort</span><span class="params">(<span class="meta">@RequestBody</span> CategoryEntity[] category)</span>&#123;</span><br><span class="line">    categoryService.updateBatchById(Arrays.asList(category));</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目踩坑点"><a href="#项目踩坑点" class="headerlink" title="项目踩坑点"></a>项目踩坑点</h2><h5 id="版本不匹配"><a href="#版本不匹配" class="headerlink" title="版本不匹配"></a>版本不匹配</h5><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/7.JPG"></p><p>解决方案File-settings-Java Compiler：修改version，使版本相同</p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/8.JPG"></p><p><img src="/../assets/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8Eimg/9.JPG"></p><h5 id="MAVEN项目总是将lanuage-level重置到5"><a href="#MAVEN项目总是将lanuage-level重置到5" class="headerlink" title="MAVEN项目总是将lanuage level重置到5"></a>MAVEN项目总是将lanuage level重置到5</h5><p>解决方案：<a href="https://blog.csdn.net/Montaro2017/article/details/107375120/">https://blog.csdn.net/Montaro2017/article/details/107375120/</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;properties&gt;</span></span><br><span class="line">       <span class="attr">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span><br><span class="line">       <span class="attr">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span><br><span class="line">       <span class="attr">&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span></span><br><span class="line">   <span class="attr">&lt;/properties&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="连接数据库失败（Could-not-create-connection-to-database-server）"><a href="#连接数据库失败（Could-not-create-connection-to-database-server）" class="headerlink" title="连接数据库失败（Could not create connection to database server）"></a>连接数据库失败（Could not create connection to database server）</h5><p>解决方案：</p><p>驱动6.0之前的版本是用</p><p>改一下url就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url  = jdbc:mysql://localhost:3306/testserverTimezone=UTC&amp;characterEncoding=utf8&amp;useSSL=false&amp;Unicode=true</span><br></pre></td></tr></table></figure><p>而6.0之后是驱动类改变了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/test_demo?useSSL=false&amp;serverTimezone=UTC</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/NO1_UNDERDOG/article/details/110675147">(12条消息) Could not create connection to database server解决方法_NO1_UNDERDOG的博客-CSDN博客_could not create connection to database server</a></p><h5 id="springcloud-alibaba-整合nacos报错：create-config-service-error-properties-x3D-NacosConfigPropertie"><a href="#springcloud-alibaba-整合nacos报错：create-config-service-error-properties-x3D-NacosConfigPropertie" class="headerlink" title="springcloud alibaba 整合nacos报错：create config service error!properties&#x3D;NacosConfigPropertie"></a>springcloud alibaba 整合nacos报错：create config service error!properties&#x3D;NacosConfigPropertie</h5><ol><li>首先检查是否配置文件</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">application</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure><ol start="2"><li>其次是否引用了配置中心</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>如果有，注释掉</p><p><strong>问题原因</strong>：<br>    使用Nacos Config做统一配置管理时，启动springboot项目初始化都是使用bootstrap.properties配置文件去初始化上下文。<br>使用SpringCloudConfig这种统一配置时Spring Boot 配置文件的加载顺序，依次为 bootstrap.properties -&gt; bootstrap.yml -&gt;application.properties -&gt; application.yml，其中 bootstrap.properties 配置为最高优先级。<br>所以在配置过程中找不到properties文件即报错。</p><p>​若需要使用nacos配置中心，则在引用上面依赖的前提下需要在resource目录下增加bootstrap.properties文件并配置服务名以及nacos地址以及端口号，重启服务即可。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><h5 id="pom-xml不识别"><a href="#pom-xml不识别" class="headerlink" title="pom.xml不识别"></a>pom.xml不识别</h5><p>解决办法：看Maven Projects有无导入，没导入则导入即可</p><h5 id="导入renren-fast-vue时候卡在登录界面不懂"><a href="#导入renren-fast-vue时候卡在登录界面不懂" class="headerlink" title="导入renren-fast-vue时候卡在登录界面不懂"></a>导入renren-fast-vue时候卡在登录界面不懂</h5><p>解决方法：将config&#x2F;CorsConfig中的注释打开或关闭，在用nacos注册中心（跨域）时，需要将CorsConfig注释，反之，则打开</p>]]></content>
      
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown使用教程</title>
      <link href="/2023/02/16/Typora/"/>
      <url>/2023/02/16/Typora/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown的使用说明"><a href="#markdown的使用说明" class="headerlink" title="markdown的使用说明"></a>markdown的使用说明</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><blockquote><p>语法：# (一级标题)  ## (二级标题)  ### (三级标题) ……</p></blockquote><blockquote><p>代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 这是一级标题</span><br><span class="line">&gt;## 这是二级标题</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:  </p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2></blockquote><blockquote><p>快捷键:</p><ul><li>Ctrl+数字1~6可以快速将选中的文本调成对应级别的标题</li><li>Ctrl+0可以快速将选中的文本调成普通文本</li><li>Ctrl+加号&#x2F;减号对标题级别进行加减</li></ul></blockquote><h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="1、换行"><a href="#1、换行" class="headerlink" title="1、换行"></a>1、换行</h3><blockquote><p>代码:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个段落</span><br><span class="line">&gt;这是一个段落</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果: </p><p>这是一个段落<br>这是一个段落</p></blockquote><h3 id="2、分割线"><a href="#2、分割线" class="headerlink" title="2、分割线"></a>2、分割线</h3><blockquote><p>语法:  —或者***+回车</p></blockquote><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;---或者***</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><hr></blockquote><h2 id="三、文字显示"><a href="#三、文字显示" class="headerlink" title="三、文字显示"></a>三、文字显示</h2><h3 id="1、字体"><a href="#1、字体" class="headerlink" title="1、字体"></a>1、字体</h3><blockquote><p>语法:</p><ul><li>粗体:  用一对双星号包裹</li><li>删除线:  用一对双飘号包裹</li><li>下划线:  用一对u标签包裹</li><li>斜体:  用一对单星号包裹</li><li>高亮:  用一对双等号包裹</li></ul></blockquote><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;**这是粗体**</span><br><span class="line">&gt;~~这是删除线~~</span><br><span class="line">&gt;&lt;u&gt;这是下划线&lt;/u&gt;</span><br><span class="line">&gt;*这是斜体*</span><br><span class="line">&gt;==这是高亮==</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br><strong>这是粗体</strong><br><del>这是删除线</del><br><u>这是下划线</u><br><em>这是斜体</em><br>&#x3D;&#x3D;这是高亮&#x3D;&#x3D;</p></blockquote><blockquote><p>快捷键:</p><ul><li>加粗:  Ctrl+B</li><li>删除线:  Shift+Alt+5</li><li>下划线:  Ctrl+U</li><li>斜体:  Ctrl+I</li></ul></blockquote><h3 id="2、上下标"><a href="#2、上下标" class="headerlink" title="2、上下标"></a>2、上下标</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;x^2^</span><br><span class="line">&gt;H~2~O</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>x^2^<br>H<del>2</del>O</p></blockquote><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;*/-/+ +空格</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>1.只有同一级别:</p><ul><li>苹果</li><li>香蕉</li><li>橘子</li></ul><p>2.子集类:</p><ul><li>一级分类<ul><li>二级分类 <ul><li>三级分类</li></ul></li></ul></li></ul></blockquote><blockquote><p>快捷键:  Ctrl+Shift+]</p></blockquote><h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;数字+.+空格</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><ol><li>第一个标题</li><li>第二个标题</li><li>第三个标题</li></ol><ul><li>子内容1</li><li>子内容2</li></ul><ol start="4"><li>第四个标题</li></ol></blockquote><blockquote><p>快捷键:  Ctrl+Shift+[</p></blockquote><h3 id="3、任务列表"><a href="#3、任务列表" class="headerlink" title="3、任务列表"></a>3、任务列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;- [ ] 吃早餐</span><br><span class="line">&gt;- [x] 背单词</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><ul><li><input disabled="" type="checkbox"> 吃早餐</li><li><input checked="" disabled="" type="checkbox"> 背单词</li></ul></blockquote><h2 id="五、区块显示"><a href="#五、区块显示" class="headerlink" title="五、区块显示"></a>五、区块显示</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;+回车</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><blockquote><p>这是最外层区块</p><blockquote><p>这是内层区块</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>这是最内层区块</p></blockquote></blockquote></blockquote></blockquote><h2 id="六、代码显示"><a href="#六、代码显示" class="headerlink" title="六、代码显示"></a>六、代码显示</h2><h3 id="1、行内代码"><a href="#1、行内代码" class="headerlink" title="1、行内代码"></a>1、行内代码</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;`int a=0;`（说明：`位于Esc下面）</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br><code>int a=0;</code></p></blockquote><blockquote><p>快捷键:  Ctrl+Shift+&#96;</p></blockquote><h3 id="2、代码块"><a href="#2、代码块" class="headerlink" title="2、代码块"></a>2、代码块</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;```js/java/c#/text</span><br><span class="line">&gt;内容</span><br><span class="line">&gt;```</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>快捷键:  Ctrl+Shift+K</p></blockquote><h2 id="七、链接"><a href="#七、链接" class="headerlink" title="七、链接"></a>七、链接</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;www.baidu.com</span><br><span class="line">&gt;[百度一下](https://www.baidu.com)</span><br><span class="line">&gt;[百度一下](https://www.baidu.com &quot;https://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br><a href="http://www.baidu.com/">www.baidu.com</a><br><a href="https://www.baidu.com/">百度一下</a><br><a href="https://www.baidu.com/" title="https://www.baidu.com">百度一下</a></p></blockquote><blockquote><p>快捷键:  Ctrl+K</p></blockquote><h2 id="八、脚注"><a href="#八、脚注" class="headerlink" title="八、脚注"></a>八、脚注</h2><blockquote><p>说明:  对文本进行解释说明。</p></blockquote><blockquote><p>代码: </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;[^文本]</span><br><span class="line">&gt;[^文本]:解释说明</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>这是一个技术<a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A1%86%E6%9E%B6%E3%80%82">^①</a></p></blockquote><h2 id="九、图片插入"><a href="#九、图片插入" class="headerlink" title="九、图片插入"></a>九、图片插入</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;![不显示的文字](图片路径 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>![This is a picture](C:\Users\asus\Pictures\Saved Pictures\Snipaste_2020-09-03_13-19-11.png “漫步图”)</p><p>(注：效果路径为C:\Users\asus\Pictures\Saved Pictures\Snipaste_2020-09-03_13-19-11.png。在其他电脑上可能不显示。)</p></blockquote><blockquote><p>快捷键:  Ctrl+Shift+I</p></blockquote><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;|  1   |  2   |  3   |</span><br><span class="line">&gt;| :--- | :--: | ---: |</span><br><span class="line">&gt;|  4   |  5   |  6   |</span><br><span class="line">&gt;|  7   |  8   |  9   |</span><br><span class="line">&gt;|  10  |  11  |  12  |</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><table><thead><tr><th>1</th><th align="center">2</th><th align="right">3</th></tr></thead><tbody><tr><td>4</td><td align="center">5</td><td align="right">6</td></tr><tr><td>7</td><td align="center">8</td><td align="right">9</td></tr><tr><td>10</td><td align="center">11</td><td align="right">12</td></tr></tbody></table></blockquote><blockquote><p>快捷键:  Ctrl+T</p></blockquote><h2 id="十一、流程图"><a href="#十一、流程图" class="headerlink" title="十一、流程图"></a>十一、流程图</h2><h3 id="1、横向流程图"><a href="#1、横向流程图" class="headerlink" title="1、横向流程图"></a>1、横向流程图</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形]==&gt;B(圆角)</span><br><span class="line">B==&gt;C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a=1|D[结果1]</span><br><span class="line">C--&gt;|a=2|E[结果2]</span><br><span class="line">F[横向流程图]</span><br><span class="line">```</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;graph LR</span><br><span class="line">&gt;A[方形]==&gt;B(圆角)</span><br><span class="line">&gt;B==&gt;C&#123;条件a&#125;</span><br><span class="line">&gt;C--&gt;|a=1|D[结果1]</span><br><span class="line">&gt;C--&gt;|a=2|E[结果2]</span><br><span class="line">&gt;F[横向流程图]</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、竖向流程图"><a href="#2、竖向流程图" class="headerlink" title="2、竖向流程图"></a>2、竖向流程图</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">&gt;graph TD</span><br><span class="line">&gt;A[方形]==&gt;B(圆角)</span><br><span class="line">&gt;B==&gt;C&#123;条件a&#125;</span><br><span class="line">&gt;C--&gt;|a=1|D[结果1]</span><br><span class="line">&gt;C--&gt;|a=2|E[结果2]</span><br><span class="line">&gt;F[竖向流程图]</span><br><span class="line">&gt;```</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;graph TD</span><br><span class="line">&gt;A[方形]==&gt;B(圆角)</span><br><span class="line">&gt;B==&gt;C&#123;条件a&#125;</span><br><span class="line">&gt;C--&gt;|a=1|D[结果1]</span><br><span class="line">&gt;C--&gt;|a=2|E[结果2]</span><br><span class="line">&gt;F[竖向流程图]</span><br></pre></td></tr></table></figure></blockquote><h2 id="十二、表情符号"><a href="#十二、表情符号" class="headerlink" title="十二、表情符号"></a>十二、表情符号</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;:happy:、:cry:、:man:</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>:happy:、 :cry:、 :man:</p></blockquote><h2 id="十三、数学公式的输入"><a href="#十三、数学公式的输入" class="headerlink" title="十三、数学公式的输入"></a>十三、数学公式的输入</h2><h3 id="1、公式的插入"><a href="#1、公式的插入" class="headerlink" title="1、公式的插入"></a>1、公式的插入</h3><h4 id="①行中公式"><a href="#①行中公式" class="headerlink" title="①行中公式"></a>①行中公式</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$公式$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$公式$</p></blockquote><h4 id="②独立公式"><a href="#②独立公式" class="headerlink" title="②独立公式"></a>②独立公式</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;公式</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$$<br>公式<br>$$</p></blockquote><h3 id="2、上下标-1"><a href="#2、上下标-1" class="headerlink" title="2、上下标"></a>2、上下标</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;$x^&#123;y^z&#125;=(1+e^x)^&#123;-2xy^w&#125;$</span><br><span class="line">&gt;$\sideset&#123;^1_2&#125;&#123;^3_4&#125;&#123;\underset&#123;6&#125;\bigotimes&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$x^{y^z}&#x3D;(1+e^x)^{-2xy^w}$</p><p>$\sideset{^1_2}{^3_4}{\underset{6}\bigotimes}$</p></blockquote><h3 id="3、括号和分隔符"><a href="#3、括号和分隔符" class="headerlink" title="3、括号和分隔符"></a>3、括号和分隔符</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\langle\quad\rangle\quad\lceil\quad\rceil\quad\lfloor\quad\rfloor\quad\lbrace\quad\rbrace\quad\lVert\quad\rVert$</span><br><span class="line">&gt;$f(x,y,z)=3y^2z\left(3+\dfrac&#123;7x+5&#125;&#123;1+y^2&#125;\right)$</span><br><span class="line">&gt;$\left.\dfrac&#123;\mathrm&#123;d&#125;u&#125;&#123;\mathrm&#123;d&#125;x&#125;\right|_&#123;x=0&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$\langle\quad\rangle\quad\lceil\quad\rceil\quad\lfloor\quad\rfloor\quad\lbrace\quad\rbrace\quad\lVert\quad\rVert$<br>$f(x,y,z)&#x3D;3y^2z\left(3+\dfrac{7x+5}{1+y^2}\right)$<br>$\left.\dfrac{\mathrm{d}u}{\mathrm{d}x}\right|_{x&#x3D;0}$</p></blockquote><h3 id="4、分数"><a href="#4、分数" class="headerlink" title="4、分数"></a>4、分数</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\frac&#123;a&#125;&#123;b&#125;\quad\dfrac&#123;a&#125;&#123;b&#125;\quad &#123;a\over b&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$\frac{a}{b}\quad\dfrac{a}{b}\quad {a\over b}$</p></blockquote><h3 id="5、开方"><a href="#5、开方" class="headerlink" title="5、开方"></a>5、开方</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\sqrt[根指数,省略时为2]&#123;被开方数&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$\sqrt{2}\quad\sqrt[3]{2}$</p></blockquote><h3 id="6、省略号"><a href="#6、省略号" class="headerlink" title="6、省略号"></a>6、省略号</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\cdots\quad\ldots\quad\vdots\quad\ddots$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$\cdots\quad\ldots\quad\vdots\quad\ddots$</p></blockquote><h3 id="7、矢量和均值"><a href="#7、矢量和均值" class="headerlink" title="7、矢量和均值"></a>7、矢量和均值</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\overrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overleftarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overleftrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underleftarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underleftrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overline&#123;v&#125;=\bar&#123;v&#125;\quad\underline&#123;v&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:</p><p>$\overrightarrow{E(\vec{r})}\quad\overleftarrow{E(\vec{r})}\quad\overleftrightarrow{E(\vec{r})}\quad\underrightarrow{E(\vec{r})}\quad\underleftarrow{E(\vec{r})}\quad\underleftrightarrow{E(\vec{r})}\quad\overline{v}&#x3D;\bar{v}\quad\underline{v}$</p></blockquote><h3 id="8、积分"><a href="#8、积分" class="headerlink" title="8、积分"></a>8、积分</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;\iint\limits_D\left(\dfrac&#123;\partial Q&#125;&#123;\partial x&#125;-\dfrac&#123;\partial P&#125;&#123;\partial y&#125;\right)&#123;\rm d&#125;x&#123;\rm d&#125;y=\oint\limits_LP&#123;\rm d&#125;x+Q&#123;\rm d&#125;y</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$$<br>\iint\limits_D\left(\dfrac{\partial Q}{\partial x}-\dfrac{\partial P}{\partial y}\right){\rm d}x{\rm d}y&#x3D;\oint\limits_LP{\rm d}x+Q{\rm d}y<br>$$</p></blockquote><h3 id="9、极限"><a href="#9、极限" class="headerlink" title="9、极限"></a>9、极限</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\lim\limits_&#123;n\to\infin&#125;(1+\dfrac&#123;1&#125;&#123;n&#125;)^n=e$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$\lim\limits_{n\to\infin}(1+\dfrac{1}{n})^n&#x3D;e$</p></blockquote><h3 id="10、累加、累乘及交集、并集"><a href="#10、累加、累乘及交集、并集" class="headerlink" title="10、累加、累乘及交集、并集"></a>10、累加、累乘及交集、并集</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\sum\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\prod\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\bigcup\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\bigcap\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$\sum\limits_{i&#x3D;1}^n\dfrac{1}{n^2}\quad and\quad\prod\limits_{i&#x3D;1}^n\dfrac{1}{n^2}\quad and\quad\bigcup\limits_{i&#x3D;1}^n\dfrac{1}{n^2}\quad and\quad\bigcap\limits_{i&#x3D;1}^n\dfrac{1}{n^2}$</p></blockquote><h3 id="11、希腊字母"><a href="#11、希腊字母" class="headerlink" title="11、希腊字母"></a>11、希腊字母</h3><table><thead><tr><th>语法</th><th>字母</th><th>语法</th><th>字母</th><th>语法</th><th>字母</th></tr></thead><tbody><tr><td>\Alpha(\alpha)</td><td>$\Alpha(\alpha)$</td><td>\Beta(\beta)</td><td>$\Beta(\beta)$</td><td>\Gamma(\gamma)</td><td>$\Gamma(\gamma)$</td></tr><tr><td>\Epsilon(\epsilon)\varepsilon</td><td>$\Epsilon(\epsilon)\varepsilon$</td><td>\Zeta(\zeta)</td><td>$\Zeta(\zeta)$</td><td>\Eta(\eta)</td><td>$\Eta(\eta)$</td></tr><tr><td>\Iota(\iota)</td><td>$\Iota(\iota)$</td><td>\Kappa(\kappa)\varkappa</td><td>$\Kappa(\kappa)\varkappa$</td><td>\Lambda(\lambda)</td><td>$\Lambda(\lambda)$</td></tr><tr><td>\Nu(\nu)</td><td>$\Nu(\nu)$</td><td>\Xi(\xi)</td><td>$\Xi(\xi)$</td><td>\Omicron(\omicron)</td><td>$\Omicron(\omicron)$</td></tr><tr><td>\Rho(\rho)\varrho</td><td>$\Rho(\rho)\varrho$</td><td>\Sigma(\sigma)\varsigma</td><td>$\Sigma(\sigma)\varsigma$</td><td>\Tau(\tau)</td><td>$\Tau(\tau)$</td></tr><tr><td>\Phi(\phi)\varphi</td><td>$\Phi(\phi)\varphi$</td><td>\Chi(\chi)</td><td>$\Chi(\chi)$</td><td>\Psi(\psi)</td><td>$\Psi(\psi)$</td></tr><tr><td>\Delta(\delta)</td><td>$\Delta(\delta)$</td><td>\Theta(\theta)\vartheta</td><td>$\Theta(\theta)\vartheta$</td><td>\Mu(\mu)</td><td>$\Mu(\mu)$</td></tr><tr><td>\Pi(\pi)\varpi</td><td>$\Pi(\pi)\varpi$</td><td>\Omega(\omega)</td><td>$\Omega(\omega)$</td><td>\upsilon</td><td>$\upsilon$</td></tr><tr><td>\ell</td><td>$\ell$</td><td>\eth</td><td>$\eth$</td><td>\hbar</td><td>$\hbar$</td></tr><tr><td>\hslash</td><td>$\hslash$</td><td>\mho</td><td>$\mho$</td><td>\partial</td><td>$\partial$</td></tr></tbody></table><h3 id="12、特殊字符"><a href="#12、特殊字符" class="headerlink" title="12、特殊字符"></a>12、特殊字符</h3><h4 id="①说明"><a href="#①说明" class="headerlink" title="①说明"></a>①说明</h4><blockquote><p>可以在字符前使用<code>\large</code>或<code>\small</code>以显示更大或更小的字符。${\LARGE A}{\Large A}{\large A}A{\small A}$</p></blockquote><h4 id="②关系运算符"><a href="#②关系运算符" class="headerlink" title="②关系运算符"></a>②关系运算符</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\pm(\mp)</td><td>$\pm(\mp)$</td><td>\times</td><td>$\times$</td><td>\div</td><td>$\div$</td></tr><tr><td>\nmid</td><td>$\nmid$</td><td>\cdot</td><td>$\cdot$</td><td>\mid</td><td>$\mid$</td></tr><tr><td>\bigodot</td><td>$\bigodot$</td><td>\bigotimes</td><td>$\bigotimes$</td><td>\bigoplus</td><td>$\bigoplus$</td></tr><tr><td>\ge</td><td>$\ge$</td><td>\le</td><td>$\le$</td><td>\ll</td><td>$\ll$</td></tr><tr><td>\geqslant</td><td>$\geqslant$</td><td>\leqslant</td><td>$\leqslant$</td><td>\neq</td><td>$\neq$</td></tr><tr><td>\approx</td><td>$\approx$</td><td>\xlongequal{文本}</td><td>$\xlongequal{文本}$</td><td>\triangleq</td><td>$\triangleq$</td></tr><tr><td>\sim</td><td>$\sim$</td><td>\doteq</td><td>$\doteq$</td><td>\equiv</td><td>$\equiv$</td></tr><tr><td>\cong</td><td>$\cong$</td><td>\propto</td><td>$\propto$</td><td>\parallel(\</td><td>)</td></tr><tr><td>\prec</td><td>$\prec$</td><td>\pmod{2}</td><td>$\pmod{2}$</td><td>\bmod</td><td>$\bmod{2}$</td></tr></tbody></table><h4 id="③集合运算符"><a href="#③集合运算符" class="headerlink" title="③集合运算符"></a>③集合运算符</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\emptyset</td><td>$\emptyset$</td><td>\varnothing</td><td>$\varnothing$</td><td></td><td></td></tr><tr><td>\subset</td><td>$\subset$</td><td>\subseteq</td><td>$\subseteq$</td><td>\subsetneq</td><td>$\subsetneq$</td></tr><tr><td>\supset</td><td>$\supset$</td><td>\supseteq</td><td>$\supseteq$</td><td>\supsetneq</td><td>$\supsetneq$</td></tr><tr><td>\bigcap</td><td>$\bigcap$</td><td>\bigcup</td><td>$\bigcup$</td><td>\setminus</td><td>$\setminus$</td></tr><tr><td>\bigvee</td><td>$\bigvee$</td><td>\bigwedge</td><td>$\bigwedge$</td><td></td><td></td></tr><tr><td>\in</td><td>$\in$</td><td>\notin</td><td>$\notin$</td><td>\ni</td><td>$\ni$</td></tr></tbody></table><h4 id="④三角运算符"><a href="#④三角运算符" class="headerlink" title="④三角运算符"></a>④三角运算符</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\circ</td><td>$\circ$</td><td>\bot</td><td>$\bot$</td><td>\angle</td><td>$\angle$</td></tr><tr><td>\degree</td><td>$\degree$</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="⑤微积分运算符"><a href="#⑤微积分运算符" class="headerlink" title="⑤微积分运算符"></a>⑤微积分运算符</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\int</td><td>$\int$</td><td>\iint</td><td>$\iint$</td><td>\iiint</td><td>$\iiint$</td></tr><tr><td>\oint</td><td>$\oint$</td><td>\oiint</td><td>$\oiint$</td><td>\prime(‘)</td><td>$\prime$</td></tr><tr><td>\lim</td><td>$\lim$</td><td>\infin</td><td>$\infin$</td><td>\nabla</td><td>$\nabla$</td></tr><tr><td>\grad</td><td>$\grad$</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="⑥逻辑运算符"><a href="#⑥逻辑运算符" class="headerlink" title="⑥逻辑运算符"></a>⑥逻辑运算符</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\because</td><td>$\because$</td><td>\therefore</td><td>$\therefore$</td><td></td><td></td></tr><tr><td>\forall</td><td>$\forall$</td><td>\exist</td><td>$\exist$</td><td></td><td></td></tr><tr><td>\not&gt;</td><td>$\not&gt;$</td><td>\not&lt;</td><td>$\not&lt;$</td><td></td><td></td></tr><tr><td>\land</td><td>$\land$</td><td>\lor</td><td>$\lor$</td><td>\lnot</td><td>$\lnot$</td></tr><tr><td>\top</td><td>$\top$</td><td>\vdash</td><td>$\vdash$</td><td>\vDash</td><td>$\vDash$</td></tr></tbody></table><h4 id="⑦带帽符号"><a href="#⑦带帽符号" class="headerlink" title="⑦带帽符号"></a>⑦带帽符号</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\hat{xy}</td><td>$\hat{xy}$</td><td>\widehat{xyz}</td><td>$\widehat{xyz}$</td></tr><tr><td>\tilde{xy}</td><td>$\tilde{xy}$</td><td>\widetilde{xyz}</td><td>$\widetilde{xyz}$</td></tr><tr><td>\check{x}</td><td>$\check{x}$</td><td>\breve{y}</td><td>$\breve{y}$</td></tr><tr><td>\grave{x}</td><td>$\grave{x}$</td><td>\acute{y}</td><td>$\acute{y}$</td></tr><tr><td>\dot{x}</td><td>$\dot{x}$</td><td>\ddot{x}</td><td>$\ddot{x}$</td></tr><tr><td>\overparen{xy}</td><td>$\overparen{xy}$</td><td></td><td></td></tr></tbody></table><h4 id="⑧选取符号"><a href="#⑧选取符号" class="headerlink" title="⑧选取符号"></a>⑧选取符号</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\fbox{a+b+c+d}</td><td>$\fbox{a+b+c+d}$</td><td></td><td></td></tr><tr><td>\overbrace{xx\cdots x}^{10个x}</td><td>$\overbrace{xx\cdots x}^{10个x}$</td><td>\underbrace{xx\cdots x}_{10个x}</td><td>$\underbrace{xx\cdots x}_{10个x}$</td></tr></tbody></table><h4 id="⑨箭头符号"><a href="#⑨箭头符号" class="headerlink" title="⑨箭头符号"></a>⑨箭头符号</h4><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\leftarrow</td><td>$\leftarrow$</td><td>\rightarrow</td><td>$\rightarrow$</td><td>\leftrightarrow</td><td>$\leftrightarrow$</td></tr><tr><td>\longleftarrow</td><td>$\longleftarrow$</td><td>\longrightarrow</td><td>$\longrightarrow$</td><td>\longleftrightarrow</td><td>$\longleftrightarrow$</td></tr><tr><td>\Leftarrow</td><td>$\Leftarrow$</td><td>\Rightarrow</td><td>$\Rightarrow$</td><td>\Leftrightarrow</td><td>$\Leftrightarrow$</td></tr><tr><td>\Longleftarrow</td><td>$\Longleftarrow$</td><td>\Longrightarrow</td><td>$\Longrightarrow$</td><td>\Longleftrightarrow</td><td>$\Longleftrightarrow$</td></tr><tr><td>\uparrow</td><td>$\uparrow$</td><td>\downarrow</td><td>$\downarrow$</td><td>\updownarrow</td><td>$\updownarrow$</td></tr><tr><td>\Uparrow</td><td>$\Uparrow$</td><td>\Downarrow</td><td>$\Downarrow$</td><td>\Updownarrow</td><td>$\Updownarrow$</td></tr><tr><td>\to</td><td>$\to$</td><td>\swarrow</td><td>$\swarrow$</td><td>\nearrow</td><td>$\nearrow$</td></tr><tr><td>\gets</td><td>$\gets$</td><td>\searrow</td><td>$\searrow$</td><td>\nwarrow</td><td>$\nwarrow$</td></tr><tr><td>\mapsto</td><td>$\mapsto$</td><td>\rightrightarrows</td><td>$\rightrightarrows$</td><td></td><td></td></tr></tbody></table><h4 id="⑩空格"><a href="#⑩空格" class="headerlink" title="⑩空格"></a>⑩空格</h4><table><thead><tr><th>输入</th><th>效果</th><th>输入</th><th>效果</th><th>输入</th><th>效果</th></tr></thead><tbody><tr><td>\!</td><td>$</td><td>!</td><td>$</td><td>默认</td><td>$</td></tr><tr><td>,</td><td>$</td><td>,</td><td>$</td><td>;(\ )</td><td>$</td></tr></tbody></table><h3 id="13、字体"><a href="#13、字体" class="headerlink" title="13、字体"></a>13、字体</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;\字体&#123;需要转换的字符&#125;&#125;$</span><br></pre></td></tr></table></figure></blockquote><table><thead><tr><th>输入</th><th>说明</th><th>显示</th><th>输入</th><th>说明</th><th>显示</th></tr></thead><tbody><tr><td>\rm</td><td>罗马体</td><td>${\rm{Sample}}$</td><td>\cal</td><td>花体</td><td>${\cal{Sample}}$</td></tr><tr><td>\it</td><td>意大利体</td><td>${\it{Sample}}$</td><td>\Bbb</td><td>黑板粗体</td><td>${\Bbb{Sample}}$</td></tr><tr><td>\bf</td><td>粗体</td><td>${\bf{Sample}}$</td><td>\mit</td><td>数学斜体</td><td>${\mit{Sample}}$</td></tr><tr><td>\sf</td><td>等线体</td><td>${\sf{Sample}}$</td><td>\scr</td><td>手写体</td><td>${\scr{Sample}}$</td></tr><tr><td>\tt</td><td>打字机体</td><td>${\tt{Sample}}$</td><td>\frak</td><td>旧德式字体</td><td>${\frak{Sample}}$</td></tr></tbody></table><h3 id="14、大括号和行标"><a href="#14、大括号和行标" class="headerlink" title="14、大括号和行标"></a>14、大括号和行标</h3><blockquote><p>说明:  使用<code>\left</code>和<code>\right</code>来创建自动匹配高度的<code>()</code>、<code>[]</code>、<code>&#123;&#125;</code>、<code>.</code>。在每个公式末尾使用<code>\tag&#123;行标&#125;</code>来实现行标。</p></blockquote><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;f\left(</span><br><span class="line">&gt;\left[</span><br><span class="line">&gt;\dfrac&#123;1+\&#123;x,y\&#125;&#125;&#123;\left(\dfrac&#123;x&#125;&#123;y&#125;+\dfrac&#123;y&#125;&#123;x&#125;\right)(u+1)&#125;+a</span><br><span class="line">&gt;\right]</span><br><span class="line">&gt;^&#123;\dfrac&#123;3&#125;&#123;2&#125;&#125;</span><br><span class="line">&gt;\right)</span><br><span class="line">&gt;\tag&#123;行标&#125;</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$$<br>f\left(\left[\dfrac{1+{x,y}}{\left(\dfrac{x}{y}+\dfrac{y}{x}\right)(u+1)}+a\right]^{\dfrac{3}{2}}\right)\tag{行标}<br>$$</p></blockquote><blockquote><p>说明:如果你想将行内显示的分隔符也变大,也可以使用<code>\middle</code>命令</p></blockquote><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;\left\langle q\middle\|\dfrac&#123;\dfrac&#123;x&#125;&#123;y&#125;&#125;&#123;\dfrac&#123;u&#125;&#123;v&#125;&#125;\middle|p\right\rangle</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$$<br>\left\langle q\middle|\dfrac{\dfrac{x}{y}}{\dfrac{u}{v}}\middle|p\right\rangle<br>$$</p></blockquote><h3 id="15、其他命令"><a href="#15、其他命令" class="headerlink" title="15、其他命令"></a>15、其他命令</h3><h4 id="①注释文字"><a href="#①注释文字" class="headerlink" title="①注释文字"></a>①注释文字</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\text&#123;文字&#125;$</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>效果:<br>$$<br>f(n)&#x3D;\begin{cases}n&#x2F;2,&amp;\text{if $n$ is even}\3n+1,&amp;\text{if $n$ is odd}\end{cases}<br>$$</p></blockquote><h4 id="③文字颜色"><a href="#③文字颜色" class="headerlink" title="③文字颜色"></a>③文字颜色</h4><blockquote><ul><li>适用新旧浏览器<br> 代码:</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">浅红色文字：&lt;font color=&quot;#dd0000&quot;&gt;浅红色文字：&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深红色文字：&lt;font color=&quot;#660000&quot;&gt;深红色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">浅绿色文字：&lt;font color=&quot;#00dd00&quot;&gt;浅绿色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深绿色文字：&lt;font color=&quot;#006600&quot;&gt;深绿色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">浅蓝色文字：&lt;font color=&quot;#0000dd&quot;&gt;浅蓝色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深蓝色文字：&lt;font color=&quot;#000066&quot;&gt;深蓝色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">浅黄色文字：&lt;font color=&quot;#dddd00&quot;&gt;浅黄色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深黄色文字：&lt;font color=&quot;#666600&quot;&gt;深黄色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">浅青色文字：&lt;font color=&quot;#00dddd&quot;&gt;浅青色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深青色文字：&lt;font color=&quot;#006666&quot;&gt;深青色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">浅紫色文字：&lt;font color=&quot;#dd00dd&quot;&gt;浅紫色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line">深紫色文字：&lt;font color=&quot;#660066&quot;&gt;深紫色文字&lt;/font&gt;&lt;br /&gt; </span><br></pre></td></tr></table></figure><p> 浅红色文字：<font color="#dd0000">浅红色文字：</font><br /><br> 深红色文字：<font color="#660000">深红色文字</font><br /><br> 浅绿色文字：<font color="#00dd00">浅绿色文字</font><br /><br> 深绿色文字：<font color="#006600">深绿色文字</font><br /><br> 浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br /><br> 深蓝色文字：<font color="#000066">深蓝色文字</font><br /><br> 浅黄色文字：<font color="#dddd00">浅黄色文字</font><br /><br> 深黄色文字：<font color="#666600">深黄色文字</font><br /><br> 浅青色文字：<font color="#00dddd">浅青色文字</font><br /><br> 深青色文字：<font color="#006666">深青色文字</font><br /><br> 浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br /><br> 深紫色文字：<font color="#660066">深紫色文字</font><br /> </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\color&#123;颜色&#125;&#123;文字&#125;$</span><br></pre></td></tr></table></figure></blockquote><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>black</td><td>$\color{black}{color}$</td><td>grey</td><td>$\color{grey}{color}$</td><td>silver</td><td>$\color{silver}{color}$</td></tr><tr><td>white</td><td>$\color{white}{color}$</td><td>maroon</td><td>$\color{maroon}{color}$</td><td>red</td><td>$\color{red}{color}$</td></tr><tr><td>yellow</td><td>$\color{yellow}{color}$</td><td>lime</td><td>$\color{lime}{color}$</td><td>olive</td><td>$\color{olive}{color}$</td></tr><tr><td>green</td><td>$\color{green}{color}$</td><td>teal</td><td>$\color{teal}{color}$</td><td>auqa</td><td>$\color{auqa}{color}$</td></tr><tr><td>blue</td><td>$\color{blue}{color}$</td><td>navy</td><td>$\color{navy}{color}$</td><td>purple</td><td>$\color{purple}{color}$</td></tr><tr><td>fuchsia</td><td>$\color{fuchsia}{color}$</td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><ul><li>适用新版浏览器<br>代码:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\color&#123;#rgb&#125;&#123;文字&#125;$    (注:其中r、g、b可以输入0~9和a~f来分别表示红色、绿色和蓝色的纯度)</span><br></pre></td></tr></table></figure></li></ul></blockquote><table><thead><tr><th>输入</th><th>输出</th><th>输入</th><th>输出</th><th>输入</th><th>输出</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>#000</td><td>$\color</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/02/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/02/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章  绪论"></a>第一章  绪论</h1><p><strong>1.计算机网络的功能：数据通信、资源共享、实现分布式处理、集中管理、提高可靠性等五大功能。</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/3.JPG"></p><p><strong>2.资源子网与通信子网：包括基本定义和组成。</strong><br>    <strong>资源子网主要负责数据信息的处理，主要包括所有的服务器、客户机、各种网络协议、网络操作系统、网络软件、数据库等</strong><br>    <strong>通信子网主要负责数据信息的运输，主要包括通讯线路、网络连接设备、网络通信协议、通信控制软件等</strong></p><p><strong>3.计算机网络的分类：</strong><br>    <strong>局域网（LAN）、域域网（MAN）、广域网（WAN）（按照距离小到大分类）；</strong><br>    <strong>有线网络、光纤网络、无线网络（按照传输介质分类）；</strong><br>    <strong>星型网络、总线型网络、环型网络、树型和网状型（按照拓扑结构，前三种为主）；</strong><br>    <strong>广播式网络、点对点式网络（按照通信方式分类）；</strong></p><p><strong>4.计算机网络的体系结构：网络中的各层、层中协议和层间接口的集合；</strong></p><p><strong>5.协议的三要素：语法、语义和时序，以及相关涵义；</strong><br>    <strong>语法规定了传输数据的格式（讲什么）；</strong><br>    <strong>语义规定了各个协议元素的含义和解释（如何讲）；</strong><br>    <strong>时序规定了各种操作的顺序关系（何时讲）;</strong> </p><p><font color="#dd0000"><em><strong>6.OSI参考模型：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层等七层，掌握七层名称并了解下四层的基本功能</strong></em></font><br>    <strong>物理层：基本单位为比特，主要任务是在物理媒体上为数据端设备透明地传输原始比特流，功能：定义接口特性、定义传输模式、定义传输速率、比特同步、比特编码</strong><br>    <strong>数据 链路层：基本单位为帧，主要任务是把网络层传下来的数据报组装成帧，功能为成帧、差错控制、流量控制、接入控制</strong><br>    <strong>网络层：基本单位为数据报，主要任务是把分组从源端传到目的端，功能为分组传送、拥塞控制、路由选择和流量控制</strong><br>    <strong>传输层：基本单位为报文端或用户数据报，主要任务是负责主机中两个进程的通信（端到端）功能：可靠传输、不可靠传输、差错控制、流量控制、复用分用</strong></p><p>​<strong>协议数据单元PDU：对等实体所交换的数据块，分为两部分组成，本层的协议控制信息和用户信息</strong></p><p>​           <img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/1.JPG"></p><p><font color="#dd0000"><em><strong>7.TCP&#x2F;IP模型：应用层、传输层、网际层、网络接口层等四层，掌握四层名称，并了解下三层的基本功能；</strong></em></font><br>    <font color="#dd0000"><strong>网络接口层：功能：将网际层的IP数据报通过物理网络发送</strong></font><br>    <font color="#dd0000"><strong>网际层：对应OSI的网络层</strong></font><br>    <font color="#dd0000"><strong>传输层：对应OSI的传输层</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/2.JPG"></p><p><strong>8.物理层的主要任务描述为确定与传输媒体的接口的一些特性，即：机械特性、电气特性、功能特性、规程特性；</strong></p><hr><h1 id="第二章-数据通信与物理层"><a href="#第二章-数据通信与物理层" class="headerlink" title="第二章  数据通信与物理层"></a>第二章  数据通信与物理层</h1><p><strong>1.信息、数据（模拟数据（连续）与数字数据（离散））、信号（模拟信号（连续）与数字信号（离散））、信道（模拟信道（连续）与数字信道（离散））</strong></p><p><strong>2.DTE设备与DCE设备的基本定义及相关设备；</strong><br>    <strong>数据终端设备（DTE）：用于发送和接收数据的设备,如计算机、路由器<br>    数据电路端接设备（DCE）：用于连接DTE与数据通信网络的设备，如交换机、调制解调器、交换机、集线器</strong></p><p><font color="#dd0000"><strong>3.波特率：即码元传输速率，每秒可以传输的电脉冲信号数量；（重点）</strong></font><br>$$<br>B&#x3D;1&#x2F;T(baud)<br>\<br>B表示波特率，T为信号码元的时间宽度，时间为s<br>$$</p><p><font color="#dd0000"><strong>4.数据传输速率：每秒能传输构成代码的位(bit)数。数据速率&#x3D;码元速率*log２Ｍ，M为码元的状态数；（重点）</strong></font><br>$$<br>C&#x3D;BI&#x3D;B \times log_2{M} (bit&#x2F;s)<br>\<br>C为比特率，B代表波特率，M为码元表示的有效状态数<br>$$</p><p><font color="#dd0000"><strong>5.信道带宽：对于模拟信道而言，信道带宽指网络信号可使用的最高频率与最低频率之差、或者说是“频带的宽度”；对于数字信道，与信道容量一致；（重点）</strong></font></p><p><font color="#dd0000"><strong>6.信道容量：一个信道传输数据的极限能力, 等同于最大数据传输速率，单位也用位&#x2F;秒(bps)；（重点）</strong></font></p><p><font color="#dd0000"><strong>7.发送时延 &#x3D;  数据块长度（比特）&#x2F;信道带宽（比特&#x2F;秒）;（重点）</strong></font><br>$$<br>发送时延&#x3D;\quad {数据块长度(bit)\over 信道带宽(bit&#x2F;s)}<br>$$<br><font color="#dd0000"><strong>8.传播时延 &#x3D; 传输介质长度（米）&#x2F;电信号传播速度(米&#x2F;秒)（重点）</strong></font><br>$$<br>传播时延&#x3D;\quad {信道长度(m)\over 电磁波在信道上的传播速率(m&#x2F;s)}<br>$$<br><font color="#dd0000"><strong>9.时延带宽积：时延带宽积 &#x3D; 传播时延 $\times$ 带宽（重点）</strong></font></p><p><strong>10.利用率：信道利用率和网络利用率两种，信道利用率并非越高越好，应在合理范围；</strong></p><p><strong>11.误码率（$p_e$）：误码率&#x3D;错误码元数&#x2F;总的码元数</strong><br>$$<br>P_e&#x3D;\quad {N_e\over N} \ N_e为被传错的码元数，N为码元总数<br>$$<br><font color="#dd0000"><strong>12.信道容量的计算：奈氏(Nyquist)准则（理想的无噪声信道）和香农定量（有噪声信道）；</strong></font><br><strong>（1）奈氏(Nyquist)准则：理想低通信道的最高码元传输速率$B_{max}&#x3D; 2·W (Baud)$对应的数据传输速率即为：$C_{max} &#x3D;2·W·log_2{M}  (bps)&#x3D;B_{max}·log_2{M}(bps)$，带宽为W(单位为hz)</strong><br><strong>（2）香农(Shannon)定理：$C_{max}&#x3D;W·log_2{(1+S&#x2F;N)}(bit&#x2F;s)$，通常用$信噪比(db)&#x3D;10log_{10}{(S&#x2F;N)}$，单位为分贝(db)</strong><br><strong>注：最大数据速率为公式算出两种数据速率取小的</strong></p><p><strong>13.数据通信方式：</strong><br><strong>（1）从通信的双方信息交互的方式来看，可以有单工模式、半双工模式和全双工模式三种类型；</strong><br><strong>（2）根据组成字符的各个二进制位是否同时传输，通信方式分为:并行传输和串行传输。</strong><br><strong>（3）在串行传输中，按照同步方式，又分为同步传输和异步传输。</strong><br><strong>（4）根据传输的是数字信号或模拟信号，分为基带传输和频带传输两种；</strong></p><p><font color="#dd0000"><strong>14.数字数据的数字信号编码：非归零码NRI、曼彻斯特编码、差分曼彻斯特编码（异0同1）、mB&#x2F;nB编码、多进制编码；重点掌握前三种编码的基本思想；（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/4.JPG"></p><p><font color="#dd0000"><strong>15.数字数据的模拟信号编码：幅移键控法（ASK）；频移键控法（FSK）；相移键控法（PSK）、多级调制幅相键控（APK），理解星座图，依据APK和码元传输速率，计算数据传输速率（带宽）；（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/5.JPG"></p><p><strong>16.模拟数据的数字信号编码：主要方法为：PCM（脉冲编码调制）</strong><br>     <strong>分为三步：采样（脉幅调制，PAM）→ 量化 → 二进制编码</strong></p><p><strong>17.奈奎斯特(Nyquist)的采样定理：采样的频率f满足$f \geqslant f_m(f_m为最高频率(Hz))$</strong></p><p><strong>18.信道复用技术：频分多路复用)(FDM)、时分复用(TDM)、波分复用(WDM)、<font color="#dd0000">码分复用 (CDM)（码分多址 (CDMA)）（重点），重点掌握码分多址（CDMA）的基本原理及计算方法和具体计算过程；</font></strong><br><strong>码分多址：将一比特的划分成m个码片来区分信号，用公式得出1或-1时则接收信号，得出0时则没信号</strong><br>$$<br>S \cdot T&#x3D;\quad{1\over m} \sum\limits_{i&#x3D;1}^ms_i \cdot t_i&#x3D;0<br>\<br>S \cdot S&#x3D;\quad{1\over m} \sum\limits_{i&#x3D;1}^ms_i \cdot s_i&#x3D;1<br>$$<br><strong>19物理层的传输介质()及其特性(第8点)（了解）</strong><br>    <strong>传输介质：<br>        导向传输介质：双绞线、同轴电缆、光纤<br>        非导向传输介质：电磁波频谱、短波通信、微波通信、红外传输</strong></p><hr><h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><p><strong>1.数据链路层的基本定义、七大基本功能、三种服务；（了解）</strong><br>        <strong>七大基本功能： 1.帧同步功能  2.差错控制  3.流量控制  4.链路管理  5.MAC寻址  6.区分数据与控制信息  7.透明传输<br>        三大服务：无确认的无连接服务   有确认的无连接服务  有确认的面向连接服务</strong></p><p><font color="#dd0000"><strong>2.帧同步：字符计数法、字符填充的首尾定界符法、比特填充的首尾定界符法；（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/6.JPG"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/8.JPG"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/7.JPG"></p><p><strong>3.差错控制：检错码－－能自动发现差错但不能纠正错误的编码：奇偶校验码、</strong><font color="#dd0000"><strong>循环冗余校验(CRC)（重点）</strong></font>；<br><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/9.JPG"></p><p>​   <strong>纠错码－－不仅能发现差错而且能自动纠正差错的编码：汉明码；</strong><br>​海明不等式$2^r \geqslant k+r+1$其中k为信息位，r为冗余位</p><p><strong>4.数据链路层协议：面向比特的链路控制规程 HDLC，因特网的点对点协议 PPP；</strong></p><hr><h1 id="第四章：局域网"><a href="#第四章：局域网" class="headerlink" title="第四章：局域网"></a>第四章：局域网</h1><p><strong>1.局域网的定义：局域网是将局部区域内的各种通信设备互联在一起的通信网络</strong></p><p><strong>2.局域网中的三种主要技术:</strong> <strong>1.用于传输数据的传输介质和传输形式</strong><br>                                                <strong>2.网络拓扑结构</strong><br>                                                <font color="#dd0000"><strong>3.用于解决线路争用的介质访问控制方法（有线以太网CSMA&#x2F;CD(带有冲突检测的载波监听多路访问控制方法 )、无线网CSMA&#x2F;CA(带有冲突避免的载波监听多路访问控制方法)）（重点）</strong></font></p><p><strong>3.</strong></p><table><thead><tr><th align="center"><strong>IEEE 802.1</strong></th><th align="center"><strong>桥接&#x2F;体系结构</strong></th></tr></thead><tbody><tr><td align="center"><strong>IEEE 802.2</strong></td><td align="center"><strong>逻辑链路控制</strong></td></tr><tr><td align="center"><strong>IEEE 802.3</strong></td><td align="center"><strong>CSMA&#x2F;CD,定义了总线访问控制方法及物理层技术规范</strong></td></tr><tr><td align="center"><strong>IEEE 802.11</strong></td><td align="center"><strong>无线局域网</strong></td></tr></tbody></table><p><font color="#dd0000"><strong>4.将局域网的数据链路层拆成两个子层：逻辑链路控制 LLC (Logical Link Control)子层介质访问控制 MAC (Medium Access Control)子层。与接入到传输介质有关的内容都放在 MAC子层，而 LLC 子层则与传输介质无关。（重点）</strong></font></p><p><strong>5.以太网介质接入控制技术：是以CSMA&#x2F;CD方式工作的局域网，以太网提供的服务对应于OSI&#x2F;RM的物理层和数据链路层、以太网的广播方式发送、采用较为灵活的无连接的工作方式，即不必先建立连接就可以直接发送数据。对发送的数据帧不进行编号，也不要求对方发回确认。</strong></p><p><strong>6. CSMA：常用的退避算法有三种：非坚持、1－坚持、P－坚持 ；</strong></p><p><font color="#dd0000"><strong>7. CSMA&#x2F;CD 协议：二进制指数退避算法；（重点）</strong></font></p><p><strong>8.争用期：以太网的端到端往返时延 2$t_p$称为争用期，或碰撞窗口。</strong></p><p><font color="#dd0000"><strong>9.争用期的长度：对于10 Mb&#x2F;s以太网，取51.2$μs$为争用期的长度，在争用期内可发送512 bit，即 64 字节。以太网在发送数据时，若前64字节没有发生碰撞，则后续的数据就不会发生碰撞。（重点）</strong></font></p><p><font color="#dd0000"><strong>10.最短有效帧长：最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于碰撞而异常中止的无效帧。（重点）</strong></font><br>$$<br>\quad {最短数据帧长(bit)\over 数据传输效率(bit&#x2F;s)}&#x3D;2 \times \quad {任意两站间的最大距离(m)\over 信号传播速度(m&#x2F;s)}<br>$$<br><font color="#dd0000"><strong>11.帧间最小间隔：以太网还规定了帧间最小间隔，为96比特时间，对于10 Mb&#x2F;s 以太网，帧间最小间隔是9.6 $μs$ 。（重点）</strong></font></p><p><strong>12.以太网MAC地址：48位；MAC地址的三种类型（单播地址、多播地址、广播地址），只有目的地址才使用广播地址和多播地址，也使用单播地址。而源地址只有单播地址。</strong></p><p><strong>13.传统以太网：传输速率为10Mbps、共享的通信线路，采用载波监听多路访问冲突检测（CSMA&#x2F;CD）的介质访问控制方法、通常采用总线型拓朴结构、采用的是曼彻斯特编码、最常见的传统以太网是10Base-5、10Base-2、10Base-T、10Base-F；扩展遵循“5-4-3”规则：最多5个网段，中间使用4个中继器连接，最多只能在3个网段上连接站点（另外两个网段用于增加距离）</strong></p><p><strong>14.高速以太网；速率达到100Mb&#x2F;s的以太网统称为快速以太网。快速以太网保持了与10Mb&#x2F;s 以太网同样的MAC子层，使用同样的CSMA&#x2F;CD协议和相同的帧格式。包括同样的基本内容，例如：最大帧长1518B、最小帧长64B、争用期512比特时间、帧间隙96比特时间等；</strong></p><p><font color="#dd0000"><strong>15.碰撞域与广播域：掌握集线器、交换机、路由器所对应的碰撞域和广播域与端口数之间的关系；（重点）</strong></font></p><p>​<strong>默认时路由器分割广域网和冲突域。交换机只配合冲突域（交换机的每一个端口都是冲突域） 连接在集线器的网络只有冲突域</strong></p><p><strong>16.交换式以太网：交换机；地址映射表：以太网交换机利用“地址学习”法来动态建立和维护端口&#x2F;MAC地址映射表；</strong></p><p><strong>17.交换机的数据转发方式：直接交换、存储转发交换、改进的直接交换；</strong></p><p><strong>18.虚拟局域网VLAN：是由一些局域网网段构成的与物理位置无关的逻辑组。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个VLAN。划分VLAN隔离广播风暴；</strong></p><p><strong>19.VLAN的实现方式：静态VLAN又被称为基于端口的VLAN；动态VLAN：基于MAC地址的VLAN、基于子网（IP）的VLAN、基于用户的VLAN；</strong></p><p><strong>20.无线局域网：是利用无线通信技术，在一定的局部范围内建立的网络，是计算机网络与无线通信技术相结合的产物。它以无线传输媒体作为传输介质；</strong></p><p><strong>21.无线局域网的拓扑结构可归结为两类：（1）无中心拓扑结构（也叫对等式拓扑结构），自组网络模式。（2）有中心拓扑结构。接入模式（基础设施模式）；</strong></p><p><font color="#dd0000"><strong>22.IEEE 802.11标准</strong></font></p><table><thead><tr><th align="center">802.11</th><th align="center">只能达到2Mbps</th></tr></thead><tbody><tr><td align="center"><strong>802.11b</strong></td><td align="center"><strong>数据率为 5.5 或 11 Mb&#x2F;s</strong></td></tr><tr><td align="center"><strong>802.11a</strong></td><td align="center"><strong>可提供25Mbps的无线ATM接口和10Mbps的以太网无线帧结构接口</strong></td></tr><tr><td align="center"><strong>802.11g</strong></td><td align="center"><strong>原始传送速度为54Mbit&#x2F;s，净传输速度约为24.7Mbit&#x2F;s</strong></td></tr><tr><td align="center"><strong>802.11n</strong></td><td align="center"><strong>300Mbps甚至高达600Mbps</strong></td></tr></tbody></table><p><strong>22.无线局域网使用 CSMA&#x2F;CA 协议；</strong></p><hr><h1 id="第五章：广域网"><a href="#第五章：广域网" class="headerlink" title="第五章：广域网"></a><strong>第五章：广域网</strong></h1><p><strong>1.数据交换技术主要有两种：电路交换、存储-转发（报文交换、分组交换）</strong></p><p><font color="#dd0000"><strong>2.电路交换：建立电路连接、传输数据、电路释放；（重点）</strong></font></p><p><font color="#dd0000"><strong>3.报文交换：把要发送的整个数据块称为一个报文。报文是交换的单位；报文的大小则是不固定的；（重点）</strong></font></p><p><font color="#dd0000"><strong>4.分组交换：将用户要传送的信息分割为若干个分组，每个分组中有一个首部；分组的大小是固定的；（重点）</strong></font></p><p><strong>5.ATM网：异步传输模式网络；信元：53字节&#x3D;48字节数据+5字节信头；</strong></p><hr><h1 id="第六章：网络层"><a href="#第六章：网络层" class="headerlink" title="第六章：网络层"></a><strong>第六章：网络层</strong></h1><p><strong>1.网络层：是解决网络与网络之间，即网际的通信问题，将分布在不同地理位置、相同或不同类型的计算机网络连成一个网，进行高速数据通信，实现资源共享和分布式处理。网络层的主要功能：提供路由、消除网络拥挤、建立和拆除网络连接；</strong></p><p><strong>2.网络层提供的服务：面向连接的网络服务（虚电路）、无连接的网络服务（数据报投递服务）</strong></p><p><strong>3.IP（Internet Protocol，互联网协议），目前使用的是IP协议第四版（IPv4），32位地址长度;</strong></p><p><font color="#dd0000"><strong>4.分类 IP 地址：IP 地址&#x3D;网络号+主机号；A类、B类、C类；IP 地址的使用范围，第一个字节范围；</strong> <strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/10.JPG"></p><p><strong>5.IP特殊地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/11.JPG"></p><p><strong>私有IP地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/12.JPG"></p><p><font color="#dd0000"><strong>6.子网划分：从主机号借用若干位作为子网号形成一个三层的结构，即：</strong> <strong>IP</strong> <strong>地址</strong> <strong>&#x3D;</strong> <strong>网络号</strong> <strong>+</strong> <strong>子网号</strong> <strong>+</strong> <strong>主机号；掌握子网划分的基本方法</strong> <strong>;</strong> <strong>（重点）</strong></font></p><p><font color="#dd0000"><strong>7.子网掩码：子网掩码的设定必须遵循一定的规则。与IP地址相同，子网掩码的长度也是32位，左边对应于IP地址中的网络位，用二进制数字“1”表示；右边对应于IP地址中的主机位，用二进制数字“0”表示。子网掩码和ip进行”与”运算可得出网络地址</strong> <strong>（重点）</strong></font></p><p><font color="#dd0000"><strong>8.无类别域间路由</strong> <strong>CIDR</strong> <strong>:</strong> <strong>IP</strong> <strong>地址</strong> <strong>&#x3D;</strong> <strong>网络前缀</strong> <strong>+</strong> <strong>主机号；使用“斜线记法</strong> <strong>”</strong> <strong>，如</strong> <strong>128.14.32.0&#x2F;20</strong> <strong>，斜线后面的</strong> <strong>20</strong> <strong>是网络前缀的位数，所以这个地址的主机号是</strong> <strong>12</strong> <strong>位；</strong> <strong>CIDR</strong> <strong>，路由聚合也称为构成超网；</strong> <strong>（重点）</strong></font></p><p><font color="#dd0000"><strong>9.IP</strong> <strong>数据报格式：</strong> <strong>IP</strong> <strong>数据报由报头和数据两部分组成，报头的前一部分是固定长度，共</strong> <strong>20</strong> <strong>字节，具体见书本；</strong> <strong>（重点）</strong></font></p><p><strong>10.分片与重组：概念及发生的位置；</strong><br>    <strong>当数据报的长度超过网络的MTU时，必须分片，并将标识复制下来以便重组</strong></p><p><strong>11.最大传输单元（MTU）：以太网：MTU&#x3D;1500字节；</strong></p><p><strong>12.IP数据报转发：直接交付(和路由器直接相连)和间接交付（没有和路由器直接连接）</strong></p><p><strong>13.网络地址转换(NAT)：借助NAT,私有地址的”内部”网络通过路由器转发数据时,私有地址被转换为合法的IP地址，主要有三种:静态转换,动态转换和端口多路复用;</strong></p><p><font color="#dd0000"><strong>14.网络层的协议：IP协议、ARP协议、RARP协议、ICMP；（重点）</strong></font><br><strong>地址解析协议(ARP协议)：PC1知道PC2的IP地址，PC1发送一个ARP广播，PC2收到后以单播的形式向pc1发送。<br>反向地址解析协议(RARP协议)：PC1知道PC2的MAC地址，通过RARP协议发出让PC2发送广播的请求。<br>网际控制报文协议(ICMP协议)：检测联机状况(ping， traceroute，traceroute的原理，TTL生存期),分为ICMP差错控制和ICMP控制报文和ICMP请求&#x2F;应答报文</strong></p><p><strong><font color="#dd0000">15.路由表的构成、路由基本思想，具体见书本；（重点） </font></strong><br><strong>路由表分为静态路由表（事先设置好的）和动态路由表（根据网络系统的运行情况自动调整的路由表）</strong></p><p><strong>16.路由算法和路由协议：距离-向量路由协议（一个路由向相邻的发送信息）：RIP，IGRP（思科公司的私有协议）；</strong><br><strong>链路状态路由协议：OSPF（一个路由向所有路由发送信息）：开放最短路径优先算法；</strong><br><strong>边界网关协议：BGP(接口交接的协议)；</strong><br><font color="#dd0000"><strong>重点掌握D-V算法和RIP协议；（重点）</strong></font><br><font color="#dd0000"><strong>17.依据</strong> <strong>RIP</strong> <strong>协议更新路由表的基本过程；</strong> <strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/13.JPG"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/14.JPG"></p><p><strong>18.环路的补救与避免(定义最大值，水平分割，路由中毒和抑制时间，触发更新)；</strong></p><p><strong>19.网络层设备—路由器；</strong></p><p><strong>20.IPv6协议：128位；冒号十六进制记法；0压缩；</strong></p><hr><h1 id="第七章：传输层"><a href="#第七章：传输层" class="headerlink" title="第七章：传输层"></a><strong>第七章：传输层</strong></h1><p><strong>1.传输层为应用进程之间提供端到端的逻辑通信（但网络层是为主机之间（点对点）提供逻辑通信）</strong></p><p><strong>2.传输层功能：连接管理、流量控制、差错检测、对用户请求的响应 、建立无连接(UDP)或面向连接(TCP)的通信等五大功能；</strong></p><p><strong>3.传输层编址</strong> <strong>——</strong> <strong>端口：端口是用来标志应用层的进程；</strong> <strong>UDP</strong> <strong>和</strong> <strong>TCP</strong> <strong>都使用了端口（</strong> <strong>port</strong> <strong>）进行寻址；端口用一个</strong> <strong>16</strong> <strong>位二进制比特进行标识；端口可以分为三大类：熟知（知名）端口、注册端口和动态端口；熟知端口只占一小部分，</strong> <strong>TCP</strong> <strong>和</strong> <strong>UDP</strong> <strong>均规定，号码为</strong> <strong>0~1023</strong> <strong>的端口才能作为熟知端口；常见的知名端口如下：</strong> <font color="#dd0000"><strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/15.JPG"></p><p><strong>4.传输协议数据单元：两个对等传输实体在通信时传送的数据单位叫作传输协议数据单元 TPDU (Transport Protocol Data Unit)；TCP 传送的协议数据单元是 TCP 报文段；UDP 传送的协议数据单元是 UDP 报文或用户数据报；</strong></p><p><strong>5.UDP：是无连接的；没有拥塞控制，也不保证可靠交付；网络出现的拥塞不会使源主机的发送速率降低。这对传输实时数据是很重要的；支持一对一、一对多、多对一和多对多的交互通信。UDP 的首部开销小，只有 8 个字节；UDP 是面向报文的；</strong></p><p><strong>6.UDP 的首部格式：首部字段和数据字段。首部字段有 8 个字节，由 4 个字段组成，每个字段都是两个字节。要求会计算；</strong> <font color="#dd0000"><strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/16.JPG"></p><p><strong>7.传输控制协议</strong> <strong>TCP</strong> <strong>：是面向连接的传输层协议；由于</strong> <strong>TCP</strong> <strong>连接只能有两个端点</strong> <strong>(endpoint)</strong> <strong>，因此</strong> <strong>TCP</strong> <strong>连接只能是点对点的（一对一）。</strong> <strong>TCP</strong> <strong>不能用于多播和广播；</strong> <strong>TCP</strong> <strong>提供可靠交付的服务。通过</strong> <strong>TCP</strong> <strong>连接传送的数据，无差错、不丢失、不重复、并且按序到达；</strong> <strong>TCP</strong> <strong>提供全双工通信；面向字节流；</strong></p><p><strong>8.TCP 报文段的首部：首部的前20个字节是固定的，后面有4N字节是根据需要而增加的选项（N为整数）。因此TCP首部的最小长度是20字节。重点掌握固定首部中各个数值的意义；</strong> <font color="#dd0000"><strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/17.JPG"></p><p><strong>9.序号：在一个TCP连接中传送的字节流中的每一个字节都按顺序编号，本字段表示本报文段所发送数据的第一个的序号</strong></p><p><strong>10.确认号：期望收到下一个报文段的第一个数据字节的序号</strong></p><p><strong>11.TCP可靠性保证：要求理解（确认+重传(超时重传（超过计时器时间）、冗余ACK)），尤其是对重传计时器及其具体使用过程；</strong></p><p><strong>12.TCP流量控制：要求理解流量控制的基本思想（让发送方发慢一点）；</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/20.JPG"></p><p><strong>13.TCP</strong> <strong>的拥塞控制：拥塞控制的方法：慢开始算法、拥塞避免算法、快重传算法、快恢复算法；要求理解四种算法的基本思想；</strong></p><p><strong>慢方法+拥塞方法</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/21.JPG"></p><p><strong>快重传+快恢复方法</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/22.JPG"></p><p><strong>14.TCP 的运输连接管理：运输连接有三个阶段，即：连接建立、数据传送和连接释放；</strong></p><p> <font color="#dd0000"><strong>15.三次握手建立 TCP 连接的基本过程：要求掌握在三次握手过程中的标志位的变化；</strong> <strong>（重点）</strong></font></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/18.JPG"></p><p><strong>16:四次挥手</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cimg/19.JPG"></p><hr><h1 id="第八章：应用层"><a href="#第八章：应用层" class="headerlink" title="第八章：应用层"></a><strong>第八章：应用层</strong></h1><p><strong>1.主要的应用层协议：</strong><br><strong>域名系统 （Domain Name System: DNS)文件传输协议(File Transfer Protocol: FTP)、</strong><br><strong>远程登录协议 (Telnet)、简单邮件传输协议 (Simple Mail Transfer Protocol: SMTP)、</strong><br><strong>超文本传输协议 (Hyper Text Transfer Protocol: HTTP)、</strong><br><strong>简单网络管理协议(Simple Network Management Protocol : SNMP)、</strong><br><strong>邮局协议（POP3）等等；</strong></p><p><strong>2.应用进程之间的通信模式通常可以分为两大类：客户&#x2F;服务器模式（C&#x2F;S模式，即Client&#x2F;Server模式）、对等模式（P2P模式，即Peer-to-Peer模式）；绝大多数的应用进程采用的是客户&#x2F;服务器模式；</strong></p><p><strong>3.域名系统 DNS：指在 Internet 中使用的分配名字和地址的机制，通俗一点说，就是将域名翻译为对应的IP地址；DNS服务主要基于UDP来实现，端口号&#x3D;53；</strong></p><p><strong>4.文件传送协议 FTP：FTP 的主要功能是减少或消除在不同操作系统下处理文件的不兼容性；FTP 使用 TCP 来实现可靠的传输服务；FTP也是一个客户&#x2F;服务器系统；FTP和其他客户&#x2F;服务器应用程序的不同之处在于客户端和服务器之间使用两条TCP连接：一条是控制连接（用来传输命令和响应，）、一条是数据连接（用来传输数据）；对应的端口号分别是21和20；</strong></p><p><strong>5.简单文件传输协议</strong> <strong>TFTP</strong> <strong>：使用</strong> <strong>UDP</strong> <strong>而不是</strong> <strong>TCP</strong> <strong>进行文件传输，以保持算法简单和短小。</strong> <strong>TFTP</strong> <strong>服务器使用</strong> <strong>UDP</strong> <strong>端口</strong> <strong>69</strong> <strong>；</strong></p><p><strong>6.电子邮件：发送邮件的协议：<br>简单邮件传送协议</strong> <strong>SMTP (Simple Mail Transfer Protocol)</strong> <strong>、</strong><br><strong>读取邮件的协议：邮局协议</strong> <strong>POP3 (Post Office Protocol</strong> <strong>第</strong> <strong>3</strong> <strong>版</strong> <strong>)</strong> <strong>；</strong><br><strong>发送邮件使用的是</strong> <strong>SMTP</strong> <strong>协议，而接收邮件则使用</strong> <strong>POP3</strong> <strong>协议；</strong><br><strong>发送前要先建立</strong> <strong>TCP</strong> <strong>连接，</strong> <strong>SMTP</strong> <strong>客户与目的主机的</strong> <strong>SMTP</strong> <strong>服务器（使用知名端口</strong> <strong>25</strong> <strong>）建立</strong> <strong>TCP</strong> <strong>连接；</strong><br> <strong>POP</strong> <strong>客户与</strong> <strong>POP</strong> <strong>服务器（使用</strong> <strong>TCP</strong> <strong>端口</strong> <strong>110</strong> <strong>）建立</strong> <strong>TCP</strong> <strong>连接。</strong></p><p><strong>7.万维网 WWW：亦称环球信息网，英文简称为 WWW (World Wide Web)或 Web；以客户&#x2F;服务器方式工作；使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档；采用超文本传送协议 HTTP (HyperText Transfer Protocol)交换数据；HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送；默认端口号是80；</strong></p><p><strong>8.统一资源定位符 URL： URL 的一般形式是：<br>                    &lt; 协议 &gt;:&#x2F;&#x2F;&lt; 主机&gt;:&lt;端口 &gt;&#x2F;&lt; 路径 &gt;</strong> </p><p><strong>9.超文本标记语言 HTML;</strong></p><p><strong>10.动态主机配置协议</strong> <strong>DHCP</strong> <strong>：是一种简化主机</strong> <strong>IP</strong> <strong>配置管理的</strong> <strong>TCP&#x2F;IP</strong> <strong>标准，</strong> <strong>DHCP</strong> <strong>实现自动分配</strong> <strong>IP</strong> <strong>地址，利用该协议可以对</strong> <strong>IP</strong> <strong>地址等信息进行集中管理；</strong> <strong>DHCP</strong> <strong>服务器使用的</strong> <strong>UDP</strong> <strong>端口是</strong> <strong>67</strong> <strong>，</strong> <strong>DHCP</strong> <strong>客户机使用的</strong> <strong>UDP</strong> <strong>端口是</strong> <strong>68</strong> <strong>；</strong>25</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
